{"version":3,"sources":["Utils/VisibilityListener.js","Components/SettingsGroup.js","Components/ActionButton.js","Components/CommandDisplay.js","Components/CommandGroup.js","Components/EditableSetting.js","DeviceTypes/TasmotaDevice.js","Utils/CopyToClipboard.js","Components/DeviceList.js","Components/DisplayModeButtons.js","Screens/Devices.js","DeviceTypes/TasmotaDeviceConnector.js","Configuration/TasmotaConfig-6.7.0.0.js","Configuration/TasmotaConfig-7.1.2.0.js","Configuration/TasmotaVersionedConfig.js","DeviceManagement/DeviceManager.js","Screens/DeviceDetails.js","Screens/DeviceSettings.js","Screens/FindDevices.js","Screens/Console.js","Configuration/AppConfig.js","App.js","index.js"],"names":["hidden","visibilityChange","document","msHidden","webkitHidden","onWindowVisibilityChangedCallbacks","addEventListener","undefined","console","log","callback","addVisibilityChangeCallback","onWindowVisibilityChanged","indexOf","push","removeVisibilityChangeCallback","index","splice","SettingsGroup","pros","getCurrentSettings","command","event","isExpanded","stopPropagation","props","settingsGroup","settings","forEach","setting","deviceConnector","performCommandOnDeviceDirect","defaultStates","state","settingsStates","commandResponses","cmnd","success","response","newState","Object","assign","this","keys","key","toUpperCase","setState","connect","target","value","map","TextField","id","name","label","margin","variant","onChange","handleSettingsChanged","slice","ExpansionPanel","groupName","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","Box","display","flexDirection","flexWrap","renderSettingInputs","Divider","ExpansionPanelActions","Button","size","onClick","saveSettings","React","Component","ActionButton","icon","selected","selectedIcon","Tooltip","title","toolTip","style","visibility","IconButton","aria-label","onButtonClick","CommandDisplay","commandSent","commandOptions","options","concat","unshift","description","type","defaultInputSelection","defaultOption","commandName","endsWith","indexed","inputRange","range","indexRange","split","i","commandIndex","selectedOption","valueToSend","commandToSend","generateCommand","logsOutput","currentSelectedInputRangeValue","currentSelectedCommand","generateCurrentCommand","disconnect","JSON","stringify","addLog","newLog","Date","toLocaleTimeString","trim","performCommandOnDevice","sendCommandInternal","option","rangeValue","replace","arg","slashIndex","substring","flexGrow","paddingTop","width","height","px","List","dense","ListItem","role","button","onInputRangeItemSelected","ListItemIcon","Radio","checked","inputProps","ListItemText","primary","onOptionItemSelected","isCurrentSelectedOption","secondary","shouldShowValueInput","noValidate","autoComplete","rows","multiline","required","onValueInputChanged","onCommandInputChanged","TextareaAutosize","rowsMax","disabled","onClearLog","window","open","toLowerCase","TransitionProps","unmountOnExit","mountOnEnter","alignItems","flexBasis","openHelp","alignSelf","color","whiteSpace","renderCommandDetails","sendCommand","CommandGroup","commandGroupName","groupType","entries","commandGroup","sort","EditableSetting","enableEdit","currentValue","startsWith","classes","flexShrink","justifyContent","InputProps","disabledInput","Fragment","save","withStyles","theme","palette","text","onButtonTheme","createMuiTheme","blue","powerRegex","RegExp","dimmerRegex","DimmerSlider","root","paddingBottom","paddingLeft","paddingRight","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","TasmotaDevice","deviceConfig","getPanelCommandData","macAddress","deviceInfo","dimmerAnchors","online","visible","resume","pause","nextProps","deviceManager","getDeviceConnector","getDevice","status0Response","StatusNET","IPAddress","getTasmotaConfig","VisibilityListener","bind","updatedInfo","updateDevice","updateDeviceInfoState","templateResponse","gpio255Response","gpiosResponse","Module","status0Clone","status","param","StatusSNS","moduleResponse","wifiPowerResponse","dimmer","newValue","moduleResponseFormatter","Status","TableRow","TableCell","component","scope","fontSize","FriendlyName","actionButtons","renderConnectivityStatus","getModuleDisplayText","flex","renderDetailsControlsButtons","renderDetailsControlsDimmers","StatusSTS","Wifi","RSSI","Uptime","MqttCount","LinkCount","Downtime","StatusFWR","Version","Core","StatusPRM","BootCount","RestartReason","LoadAvg","Sleep","WifiPower","BSSId","Hostname","Mac","Gateway","SSId","Channel","Topic","GroupTopic","StatusMQT","MqttHost","MqttPort","MqttClient","SDK","StatusMEM","ProgramSize","Free","OtaUrl","src","padding","buttons","filter","test","ThemeProvider","powerToggle","newAnchors","dimmers","openDimmerPopover","Popover","Boolean","anchorEl","onClose","dimmerPopoverClosed","anchorOrigin","vertical","horizontal","transformOrigin","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","onChangeCommitted","dimmerUpdate","cmndData","Table","TableHead","TableBody","align","bytesString","bitArray","digitValue","char","n","reverse","renderDetailsSetOptionsListItems","setOption","StatusLOG","SetOption","setOptionStr","valueArray","convertHexStringToBitArray","setOptionsStatusMaps","items","item","itemIndex","soValue","setOptionStart","ListItemSecondaryAction","Checkbox","edge","changeSetOption","gpio","length","Array","isArray","toString","NAME","GPIO","getGPIOName","FLAG","BASE","renderTemplateResponse","CircularProgress","gpioResponseFormatter","gpioObj","gpioInfo","renderGPIOResponse","settingsGroups","colSpan","renderDetailsSetOptions","configuration","commands","renderDetailsConnectivity","renderDetailsGPIO","renderDetailsTemplate","el","createElement","setAttribute","position","body","appendChild","select","execCommand","removeChild","copyToClipboard","renderDetailsStatuses","renderType","justifyItems","Paper","renderDetailsImage","renderTypeDetails","renderTypeSettings","renderTypeList","renderTypeSettingsAndDetails","renderTypeTableStatusRow","renderTypeTableHealthRow","renderTypeTableWifiRow","renderTypeTableMqttRow","renderTypeTableFirmwareRow","imageContainer","spacing","detailsContainer","DeviceList","displayMode","renderTypeTable","renderTypeCard","devices","mac","renderButton","openDeviceDetails","deleteDevice","renderTableHeaderStatus","renderTableHeaderHealth","renderTableHeaderWifi","renderTableHeaderMqtt","renderTableHeaderFirmware","stickyHeader","deviceSections","section","renderTableHeader","itemButtons","renderItems","DisplayModeButtons","Devices","openDeviceSettings","openDeviceConsole","openWebUI","history","ip","removeDevice","newDevices","getDevices","appConfig","getAppConfig","prevProps","prevState","snapshot","putAppConfig","gtag","overflow","TasmotaDeviceConnector","ipAddress","authInfo","deviceIPAddress","deviceListeners","timer","requestDeviceStatus","listener","clearInterval","setInterval","getStatus0","getState","args","url","deviceListener","onCommandResponse","getStatus8","getModule","getWifiPower","encodeURIComponent","username","password","superagent","get","timeout","deadline","end","err","error","TasmotaConfig_06070000","structName","bitSize","gpioResponse","Commands","ButtonDebounce","Control","ButtonRetain","MQTT","SetOption11","SetOptions","SetOption13","SetOption32","SetOption40","SetOption61","Switch","SwitchDebounce","SwitchRetain","Relay","BlinkCount","BlinkTime","PowerOnState","PowerRetain","Interlock","SetOption0","SetOption26","SetOption63","TasmotaConfig_07010200","commandType","SetOption77","WiFi","CORS","updatedConfig","TasmotaVersionedConfig","getConfigurationForVersion","version","versions","closestVersion","maximumVersion","availableVersion","parseInt","substr","DeviceManager","deviceConnectors","localStorage","parse","getItem","discoveredDevices","oldInfo","saveDevices","versionStr","versionNumbers","setItem","updateDeviceConnector","deviceMac","updateIpAddress","disconnectAll","DeviceDetails","match","params","FindDevices","ipsToScan","ipsRequested","handleIPFromChange","ipFrom","nets","to","ipTo","calculateTotalIPs","handleIPToChange","addDevice","getDiscoveredDevices","commonButtons","knownDeviceButtons","newDeviceButtons","totalAddresses","numIpsRequested","numIpsCompleted","searching","enableAuth","enableCorsAutomatically","from","Address4","bigInteger","addDiscoveredDevice","WARNING","enqueueSnackbar","scanIps","shift","enableCorsAndSendRequest","sendRequest","location","protocol","hostname","port","res","setTimeout","obj","ipNum","fromBigInteger","correctForm","discoveredDevicesMacs","isDeviceKnown","reduce","knownDevices","placeholder","handleStopClicked","handleFindClicked","FormControlLabel","control","onEnableCorsAutomaticallyChanged","labelPlacement","onAuthEnableChanged","LinearProgress","valueBuffer","withSnackbar","Console","deviceName","webLogEnabled","weblogLevel","terminal","createRef","commandFired","WebLog","current","terminalInput","processCommand","line","rootNode","terminalRoot","scrolledUp","scrollTop","scrollHeight","clientHeight","pushToStdout","scrollToBottom","fireCommand","startWebLog","stopWebLog","nextCommanNumber","encodeURI","data","lines","lastIndexOf","usage","fn","generateCommands","requestLog","string","p1","p2","offset","weblogEnabled","onWegLogEnableChanged","clearStdout","sendConsoleCommand","FormControl","InputLabel","Select","labelId","onWebLogLevelChanged","MenuItem","className","ref","welcomeMessage","promptLabel","toCamelCase","AppConfig","appSessionConfig","sessionStorage","saveSessionConfig","saveAppConfig","mainMenuItems","link","App","children","child","nested","listItems","renderChildItems","CssBaseline","AppBar","appBar","Toolbar","noWrap","Drawer","drawer","paper","drawerPaper","anchor","toolbar","process","content","exact","path","render","DeviceSettings","marginBottom","main","mixins","background","default","ReactDOM","maxSnack","getElementById"],"mappings":"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7C,KAAM,yBACN6C,YAAa,uCACd,CACC7C,KAAM,qBACN6C,YAAa,qBACd,CACC7C,KAAM,eACN6C,YAAa,mCACd,CACC7C,KAAM,cACN6C,YAAa,qDACd,CACC7C,KAAM,oBACN6C,YAAa,4DACd,CACC7C,KAAM,gBACN6C,YAAa,kEACd,CACC7C,KAAM,YACN6C,YAAa,IACd,CACC7C,KAAM,cACN6C,YAAa,0DACd,CACC7C,KAAM,mBACN6C,YAAa,8CACd,CACC7C,KAAM,eACN6C,YAAa,gDACd,CACC7C,KAAM,eACN6C,YAAa,qCACd,CACC7C,KAAM,iBACN6C,YAAa,8CACd,CACC7C,KAAM,mBACN6C,YAAa,wDACd,CACC7C,KAAM,oBACN6C,YAAa,oCACd,CACC7C,KAAM,cACN6C,YAAa,IACd,CACC7C,KAAM,kBACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,4CACd,CACC7C,KAAM,cACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,kCACd,CACC7C,KAAM,yBACN6C,YAAa,IACd,CACC7C,KAAM,qBACN6C,YAAa,0BACd,CACC7C,KAAM,qBACN6C,YAAa,0BACd,CACC7C,KAAM,aACN6C,YAAa,uCACd,CACC7C,KAAM,eACN6C,YAAa,+BAGtB,CACCgY,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,IACR,CACCgI,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,CACH,CACI7S,KAAM,gBACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,6BACd,CACC7C,KAAM,uBACN6C,YAAa,gCACd,CACC7C,KAAM,kBACN6C,YAAa,iDACd,CACC7C,KAAM,iBACN6C,YAAa,6CACd,CACC7C,KAAM,eACN6C,YAAa,wBACd,CACC7C,KAAM,gBACN6C,YAAa,mDACd,CACC7C,KAAM,kBACN6C,YAAa,yDACd,CACC7C,KAAM,cACN6C,YAAa,mCACd,CACC7C,KAAM,qBACN6C,YAAa,8DACd,CACC7C,KAAM,eACN6C,YAAa,gDACd,CACC7C,KAAM,4BACN6C,YAAa,yDACd,CACC7C,KAAM,iBACN6C,YAAa,0CACd,CACC7C,KAAM,oBACN6C,YAAa,2CACd,CACC7C,KAAM,iBACN6C,YAAa,uDACd,CACC7C,KAAM,2BACN6C,YAAa,uDACd,CACC7C,KAAM,2BACN6C,YAAa,0CACd,CACC7C,KAAM,gBACN6C,YAAa,gCACd,CACC7C,KAAM,qBACN6C,YAAa,kDACd,CACC7C,KAAM,2BACN6C,YAAa,IACd,CACC7C,KAAM,iBACN6C,YAAa,IACd,CACC7C,KAAM,gBACN6C,YAAa,uDACd,CACC7C,KAAM,wBACN6C,YAAa,+DACd,CACC7C,KAAM,eACN6C,YAAa,oBACd,CACC7C,KAAM,0BACN6C,YAAa,oDACd,CACC7C,KAAM,kBACN6C,YAAa,qEACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,eACN6C,YAAa,0BACd,CACC7C,KAAM,yBACN6C,YAAa,yCAGtB,CACCgY,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,CACH,CACI7S,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAA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AAM,cACN6C,YAAa,0DACd,CACC7C,KAAM,mBACN6C,YAAa,8CACd,CACC7C,KAAM,eACN6C,YAAa,gDACd,CACC7C,KAAM,eACN6C,YAAa,qCACd,CACC7C,KAAM,iBACN6C,YAAa,8CACd,CACC7C,KAAM,mBACN6C,YAAa,wDACd,CACC7C,KAAM,oBACN6C,YAAa,oCACd,CACC7C,KAAM,cACN6C,YAAa,IACd,CACC7C,KAAM,kBACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,4CACd,CACC7C,KAAM,cACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,kCACd,CACC7C,KAAM,yBACN6C,YAAa,IACd,CACC7C,KAAM,qBACN6C,YAAa,0BACd,CACC7C,KAAM,qBACN6C,YAAa,0BACd,CACC7C,KAAM,aACN6C,YAAa,uCACd,CACC7C,KAAM,eACN6C,YAAa,+BAGtB,CACCgY,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,IACR,CACCgI,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,CACH,CACI7S,KAAM,gBACN6C,YAAa,IACd,CACC7C,KAAM,sBACN6C,YAAa,6BACd,CACC7C,KAAM,uBACN6C,YAAa,gCACd,CACC7C,KAAM,kBACN6C,YAAa,iDACd,CACC7C,KAAM,iBACN6C,YAAa,6CACd,CACC7C,KAAM,eACN6C,YAAa,wBACd,CACC7C,KAAM,gBACN6C,YAAa,mDACd,CACC7C,KAAM,kBACN6C,YAAa,yDACd,CACC7C,KAAM,cACN6C,YAAa,mCACd,CACC7C,KAAM,qBACN6C,YAAa,8DACd,CACC7C,KAAM,eACN6C,YAAa,gDACd,CACC7C,KAAM,4BACN6C,YAAa,yDACd,CACC7C,KAAM,iBACN6C,YAAa,0CACd,CACC7C,KAAM,oBACN6C,YAAa,2CACd,CACC7C,KAAM,iBACN6C,YAAa,uDACd,CACC7C,KAAM,2BACN6C,YAAa,uDACd,CACC7C,KAAM,2BACN6C,YAAa,0CACd,CACC7C,KAAM,gBACN6C,YAAa,gCACd,CACC7C,KAAM,qBACN6C,YAAa,kDACd,CACC7C,KAAM,2BACN6C,YAAa,IACd,CACC7C,KAAM,iBACN6C,YAAa,IACd,CACC7C,KAAM,gBACN6C,YAAa,uDACd,CACC7C,KAAM,wBACN6C,YAAa,+DACd,CACC7C,KAAM,eACN6C,YAAa,oBACd,CACC7C,KAAM,0BACN6C,YAAa,oDACd,CACC7C,KAAM,kBACN6C,YAAa,qEACd,CACC7C,KAAM,mBACN6C,YAAa,2DACd,CACC7C,KAAM,wBACN6C,YAAa,gDACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,eACN6C,YAAa,0BACd,CACC7C,KAAM,yBACN6C,YAAa,yCAGtB,CACCgY,WAAY,eACZ5H,eAAgB,GAChB6H,QAAS,EACTjI,MAAO,CACH,CACI7S,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,YAAa,IACd,CACC7C,KAAM,UACN6C,Y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","file":"static/js/main.09131f45.chunk.js","sourcesContent":["/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nvar hidden, visibilityChange;\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \n    hidden = \"hidden\";\n    visibilityChange = \"visibilitychange\";\n} else if (typeof document.msHidden !== \"undefined\") {\n    hidden = \"msHidden\";\n    visibilityChange = \"msvisibilitychange\";\n} else if (typeof document.webkitHidden !== \"undefined\") {\n    hidden = \"webkitHidden\";\n    visibilityChange = \"webkitvisibilitychange\";\n}\n\nvar onWindowVisibilityChangedCallbacks = [];\n\nfunction addVisibilityChangeCallback(onWindowVisibilityChanged) {\n    var index = onWindowVisibilityChangedCallbacks.indexOf(onWindowVisibilityChanged);\n    if (index === -1) {\n        onWindowVisibilityChangedCallbacks.push(onWindowVisibilityChanged);\n    }\n}\n\nfunction removeVisibilityChangeCallback(onWindowVisibilityChanged) {\n    var index = onWindowVisibilityChangedCallbacks.indexOf(onWindowVisibilityChanged);\n    if (index !== -1) {\n        onWindowVisibilityChangedCallbacks.splice(index, 1);\n    }\n}\n\nfunction handleVisibilityChange() {\n    for (let callback of onWindowVisibilityChangedCallbacks) {\n        callback(!document[hidden]);\n    }\n}\n\n// Warn if the browser doesn't support addEventListener or the Page Visibility API\nif (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\n    console.log(\"This requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API.\");\n} else {\n    // Handle page visibility change   \n    document.addEventListener(visibilityChange, handleVisibilityChange, false);\n}\n\nexport default { addVisibilityChangeCallback, removeVisibilityChangeCallback };","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport TextField from \"@material-ui/core/TextField\";\nimport { Typography, Box, Button } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\n\nclass SettingsGroup extends React.Component {\n\n    constructor(pros) {\n        super(pros)\n        let defaultStates = {}\n        this.props.settingsGroup.settings.forEach((setting) => {\n            defaultStates[setting.command] = \"\"\n        })\n        this.state = {\n            settingsStates: defaultStates,\n        }\n        this.commandResponses = {}\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        console.log('Settings cmnd %s success %s response : %O ', cmnd, success, response)\n        if (success) {\n            let newState = Object.assign({}, this.state.settingsStates)\n            Object.keys(response).forEach((key) => {\n                if (key.toUpperCase() === cmnd.toUpperCase()) {\n                    newState[cmnd] = response[key];\n                    this.commandResponses[cmnd] = response[key]\n                }\n            })\n            // newState[cmnd] = String(response[cmnd])\n            this.setState({\n                settingsStates: newState,\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.props.deviceConnector.connect(this);\n        this.props.settingsGroup.settings.forEach((setting, index) => {\n            this.props.deviceConnector.performCommandOnDeviceDirect(setting.command);\n        })\n    }\n\n    getCurrentSettings = command => (event, isExpanded) => {\n        event.stopPropagation()\n        if (isExpanded) {\n            this.props.settingsGroup.settings.forEach((setting, index) => {\n                this.props.deviceConnector.performCommandOnDeviceDirect(setting.command);\n            })\n        }\n    }\n\n    handleSettingsChanged(event, command) {\n        event.stopPropagation()\n        let newState = Object.assign({}, this.state.settingsStates)\n        newState[command] = event.target.value\n        this.setState({\n            settingsStates: newState,\n        })\n    }\n\n    renderSettingInputs() {\n        return this.props.settingsGroup.settings.map((setting, index) => {\n            return <TextField\n                key={'settings' + setting.command}\n                id={'id' + setting.name}\n                label={setting.name}\n                // placeholder={setting.name}\n                margin=\"normal\"\n                variant=\"outlined\"\n                value={this.state.settingsStates[setting.command]}\n                onChange={(event) => this.handleSettingsChanged(event, setting.command)}\n            />\n        })\n    }\n\n    saveSettings(event) {\n        event.stopPropagation()\n        let command = 'backlog'\n        this.props.settingsGroup.settings.forEach((setting, index) => {\n            if (this.state.settingsStates[setting.command] !== this.commandResponses[setting.command]) {\n                command += ' ' + setting.command + ' ' + this.state.settingsStates[setting.command] + ';'\n            }\n        })\n\n        if (command !== 'backlog') {\n            command = command.slice(0, -1);\n            console.log('Performing command %s', command)\n            this.props.deviceConnector.performCommandOnDeviceDirect(command);\n        }\n    }\n\n    render() {\n        return (\n\n            <ExpansionPanel key={`SettingsExpansionPanel-${this.props.settingsGroup.groupName}`} onChange={this.getCurrentSettings()}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>{this.props.settingsGroup.groupName}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n                        {this.renderSettingInputs()}\n                    </Box>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <Button size=\"small\" variant=\"contained\" onClick={(event) => this.saveSettings(event)}>Save {this.props.settingsGroup.groupName}</Button>\n                </ExpansionPanelActions>\n            </ExpansionPanel>\n\n        )\n    }\n\n}\n\nexport default SettingsGroup","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nclass ActionButton extends React.Component {\n\n    render() {\n        let display = this.props.icon\n        if (this.props.selected) {\n            display = this.props.selectedIcon\n        }\n\n        return (\n            <Tooltip title={this.props.toolTip} style={{visibility: this.props.visibility ? this.props.visibility : \"visible\"}}>\n                <IconButton aria-label={this.props.label} onClick={(event) => this.props.onButtonClick(event)}>\n                    {display}\n                </IconButton>\n            </Tooltip>\n\n        )\n    }\n}\n\nexport default ActionButton","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport { Typography, Box, Radio, TextField, Button, Divider, TextareaAutosize } from '@material-ui/core';\nimport { Scrollbar } from 'react-scrollbars-custom';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport HelpIcon from '@material-ui/icons/Help';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nimport ActionButton from './ActionButton'\n\nclass CommandDisplay extends React.Component {\n\n    commandSent = null\n\n    constructor(props) {\n        super(props)\n\n        this.commandOptions = this.props.command.options.concat([])\n\n        this.commandOptions.unshift({\n            display: \"Read\",\n            description: \"Read current value from device\",\n            type: \"select\"\n        })\n\n        let defaultOption = this.commandOptions[0]\n\n        let defaultInputSelection\n        if (this.props.commandName.endsWith(\"<x>\") && this.props.command.indexed) {\n            this.inputRange = []\n            let range = this.props.command.indexRange.split('..');\n            for (var i = range[0]; i <= range[1]; i++) {\n                this.inputRange.push(i);\n            }\n            defaultInputSelection = this.inputRange[0]\n        } else {\n            this.inputRange = [\"\"]\n            defaultInputSelection = \"\"\n        }\n\n        this.state = {\n            commandIndex: 0,\n            selectedOption: defaultOption,\n            valueToSend: \"\",\n            commandToSend: this.generateCommand(defaultOption, \"\", 1),\n            logsOutput: \"\",\n            currentSelectedInputRangeValue: defaultInputSelection,\n            currentSelectedCommand: this.generateCurrentCommand(1),\n        }\n    }\n\n\n    componentWillMount() {\n        this.props.deviceConnector.connect(this)\n    }\n\n    componentWillUnmount() {\n        this.props.deviceConnector.disconnect(this)\n    }\n\n    onCommandResponse(cmnd, success, response) {\n\n        if (this.commandSent && cmnd === this.commandSent) {\n            let log = `Command ${cmnd} : ${success ? \"Success\" : \"Failed\"}`\n            if (success) {\n                log += `\\nResponse : ${JSON.stringify(response, null, 2)}`\n            }\n            this.addLog(log)\n        }\n    }\n\n    onClearLog(event) {\n        event.stopPropagation()\n        this.setState({ logsOutput: '' })\n    }\n\n    addLog(newLog) {\n        this.setState({ logsOutput: (this.state.logsOutput + `\\n${new Date().toLocaleTimeString()} : ${newLog}`).trim() })\n    }\n\n    sendCommandInternal(event, command) {\n        event.stopPropagation()\n        this.addLog('Sending command : ' + command)\n        this.commandSent = command\n        this.props.deviceConnector.performCommandOnDevice(command)\n\n    }\n\n    sendCommand(event) {\n        this.sendCommandInternal(event, this.state.commandToSend)\n    }\n\n    onCommandInputChanged(event) {\n        event.stopPropagation()\n        this.setState({ commandToSend: event.target.value })\n    }\n\n    onInputRangeItemSelected(event, value) {\n        event.stopPropagation()\n        this.setState({ currentSelectedInputRangeValue: value, currentSelectedCommand: this.generateCurrentCommand(value), commandToSend: this.generateCommand(this.state.selectedOption, this.state.valueToSend, value) })\n    }\n\n    onValueInputChanged(event) {\n        event.stopPropagation()\n        this.setState({ valueToSend: event.target.value, commandToSend: this.generateCommand(this.state.selectedOption, event.target.value, this.state.currentSelectedInputRangeValue) })\n    }\n\n    onOptionItemSelected(event, option) {\n        event.stopPropagation()\n        this.setState({ selectedOption: option, commandToSend: this.generateCommand(option, this.state.valueToSend, this.state.currentSelectedInputRangeValue) })\n    }\n\n    isCurrentSelectedOption(option) {\n        if (this.state.selectedOption) {\n            return this.state.selectedOption === option\n        } else {\n            return false\n        }\n    }\n\n    shouldShowValueInput() {\n        if (this.state.selectedOption) {\n            return this.state.selectedOption.type === \"input\" || this.state.selectedOption.type === \"range\"\n        } else {\n            return false\n        }\n    }\n\n    generateCurrentCommand(rangeValue) {\n        if (this.props.commandName.endsWith('<x>')) {\n            return this.props.commandName.replace(\"<x>\", rangeValue)\n        } else {\n            return this.props.commandName\n        }\n    }\n\n    generateCommand(option, valueToSend, rangeValue) {\n        let command = this.generateCurrentCommand(rangeValue)\n        if (option) {\n            switch (option.type) {\n                case \"select\":\n                    if (option.display !== \"Read\") {\n                        let arg = option.display\n                        let slashIndex = arg.indexOf(\"/\")\n                        if (slashIndex > 0) {\n                            arg = arg.substring(0, slashIndex)\n                        }\n                        command += ` ${arg}`\n                    }\n                    break\n\n                case \"input\":\n                case \"range\":\n                default:\n                    command += ` ${valueToSend}`\n                    break\n\n            }\n        }\n        return command\n    }\n\n    renderCommandDetails() {\n        return (\n            // <React.Fragment>\n            <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} paddingTop={3}>\n                <Box display=\"flex\" flexDirection=\"row\" flexGrow={1}>\n                    <Scrollbar style={{ width: 300, height: 200 }} px={5} flexGrow={4}>\n                        <List dense>\n                            {this.inputRange.map(value => {\n                                let command = this.generateCurrentCommand(value)\n                                return (\n                                    <ListItem key={value} role={undefined} button onClick={(event) => this.onInputRangeItemSelected(event, value)}>\n                                        <ListItemIcon>\n                                            <Radio\n                                                checked={this.state.currentSelectedInputRangeValue === value}\n                                                value={value}\n                                                name={value}\n                                                inputProps={{ 'aria-label': 'A' }}\n                                            />\n                                        </ListItemIcon>\n                                        <ListItemText id={command} primary={command} />\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </Scrollbar>\n                    <Scrollbar style={{ width: 300, height: 200 }} px={5} flexGrow={4}>\n                        <List dense>\n                            {this.commandOptions.map(option => {\n                                return (\n                                    <ListItem key={option.display} role={undefined} button onClick={(event) => this.onOptionItemSelected(event, option)}>\n                                        <ListItemIcon>\n                                            <Radio\n                                                checked={this.isCurrentSelectedOption(option)}\n                                                // onChange={handleChange}\n                                                value={option.display}\n                                                name={option.display}\n                                                inputProps={{ 'aria-label': 'A' }}\n                                            />\n                                        </ListItemIcon>\n                                        <ListItemText id={option.display} primary={option.display} secondary={option.description} />\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </Scrollbar>\n                    {this.shouldShowValueInput() ?\n                        <form noValidate autoComplete=\"off\">\n                            <TextField\n                                px={5}\n                                style={{ width: 500, height: 150 }}\n                                flexGrow={4}\n                                rows=\"8\"\n                                multiline\n                                required\n                                id=\"value\"\n                                label=\"Value\"\n                                onChange={(event) => this.onValueInputChanged(event)}\n                                value={this.state.valueToSend}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </form>\n                        : null}\n\n                </Box>\n                <form noValidate autoComplete=\"off\">\n                    <TextField\n                        style={{ width: 1000, height: 100 }}\n                        rows=\"1\"\n                        multiline\n                        id=\"commandToSend\"\n                        label=\"Command to Send\"\n                        value={this.state.commandToSend}\n                        onChange={(event) => this.onCommandInputChanged(event)}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </form>\n\n                <Typography px={5} flexGrow={1}>Logs</Typography>\n                <Box display=\"flex\" flexDirection=\"row\" flexGrow={0}>\n                    <TextareaAutosize\n                        aria-label=\"minimum height\"\n                        rows={6}\n                        rowsMax={8}\n                        value={this.state.logsOutput}\n                        disabled\n                        style={{ width: 1000, height: 100 }} />\n\n                    <ActionButton\n                        key={this.props.commandName + 'clearlog'}\n                        toolTip=\"Clear Log\"\n                        label=\"Clear Log\"\n                        icon={<HighlightOffIcon />}\n                        onButtonClick={(event) => this.onClearLog(event)}\n                    />\n                </Box>\n\n            </Box>\n        )\n    }\n\n    openHelp(event, command) {\n        event.stopPropagation()\n        window.open(`https://tasmota.github.io/docs/#/Commands?id=${this.props.commandName.toLowerCase().replace(\"<x>\", \"\")}`, \"tascommands\")\n    }\n\n    render() {\n\n        return (\n            <ExpansionPanel key={`CommandDisplay-${this.props.commandName}`} TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" style={{ flexBasis: \"33%\" }}>\n                        <Typography>{this.props.commandName}</Typography>\n                        <IconButton onClick={(event) => this.openHelp(event,this.props.commandName)}>\n                            <HelpIcon />\n                        </IconButton>\n                    </Box>\n                    <Typography style={{ alignSelf: \"center\" }} color=\"textSecondary\" >{this.props.command.description.substring(0, 60)}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n                        <Typography style={{ whiteSpace: 'pre-line' }}>{this.props.command.description}</Typography>\n                        {this.renderCommandDetails()}\n                    </Box>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <Button size=\"small\" variant=\"contained\" onClick={(event) => this.sendCommand(event)}>Send Command</Button>\n                </ExpansionPanelActions>\n            </ExpansionPanel>\n        )\n    }\n}\n\nexport default CommandDisplay","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport CommandDisplay from './CommandDisplay'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography'\n\nclass CommandGroup extends React.Component {\n\n    render() {\n        return (\n\n            <ExpansionPanel key={`CommandGroup-`} TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>{`${this.props.commandGroupName} ${this.props.groupType}`}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"column\" flexGrow={1}>\n                        {Object.entries(this.props.commandGroup).sort().map(([commandName, command]) => {\n                            return (\n                                <CommandDisplay commandName={commandName} command={command} deviceConnector={this.props.deviceConnector} />\n                            )\n                        })}\n                    </Box>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n}\n\n\nexport default CommandGroup","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Box, TextField } from '@material-ui/core'\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ActionButton from './ActionButton';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nconst styles = theme => ({\n    disabledInput: {\n        color: theme.palette.text.primary,\n    },\n})\n\nclass EditableSetting extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            enableEdit: false,\n            currentValue: this.props.currentValue,\n        }\n    }\n\n    componentWillMount() {\n        this.props.deviceConnector.connect(this)\n    }\n\n    componentWillUnmount() {\n        this.props.deviceConnector.disconnect(this)\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        if (cmnd.toLowerCase().startsWith(this.props.command.toLowerCase()) && success) {\n            this.setState({ currentValue: response[this.props.command] })\n        }\n    }\n\n    save(event) {\n        event.stopPropagation()\n        this.props.deviceConnector.performCommandOnDevice(`${this.props.command} ${this.state.currentValue}`)\n        this.setState({ enableEdit: false })\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <Box display=\"flex\" flexDirection=\"row\" flexGrow={0} flexShrink={1} justifyContent=\"center\">\n                <TextField\n                    key={'editable-setting' + this.props.command}\n                    disabled={this.state.enableEdit ? 0 : 1}\n                    id={'id' + this.props.command}\n                    label={this.props.label}\n                    color=\"primary\"\n                    margin=\"normal\"\n                    value={this.state.currentValue}\n                    InputProps={{ classes: { disabled: classes.disabledInput } }}\n                    onChange={(event) => this.setState({ currentValue: event.target.value })}\n                />\n\n                {!this.state.enableEdit ?\n                    <React.Fragment>\n                        <ActionButton\n                            toolTip=\"Edit\"\n                            label=\"edit\"\n                            icon={<EditIcon />}\n                            onButtonClick={() => this.setState({ enableEdit: true })}\n                        />\n                    </React.Fragment>\n                    :\n                    (\n                        <React.Fragment>\n                            <ActionButton\n                                toolTip=\"Save\"\n                                label=\"save\"\n                                icon={<DoneIcon />}\n                                onButtonClick={(event) => this.save(event)}\n\n                            />\n                        </React.Fragment>\n                    )\n                }\n\n                <ActionButton\n                    visibility={this.state.enableEdit ? \"visible\" : \"hidden\"}\n                    toolTip=\"Cancel\"\n                    label=\"cancel\"\n                    icon={<CancelIcon />}\n                    onButtonClick={(event) => this.setState({ enableEdit: false })}\n                />\n\n            </Box>\n\n        )\n    }\n}\n\nexport default withStyles(styles)(EditableSetting)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { green, blue } from '@material-ui/core/colors';\nimport { Box, Grid, Paper, Container, Button, Slider, Divider, Tooltip } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeveloperBoardIcon from '@material-ui/icons/DeveloperBoard';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport React, { Component } from 'react';\nimport Svg from 'react-inlinesvg';\nimport Table from '@material-ui/core/Table';\nimport Link from '@material-ui/core/Link';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilityListener from '../Utils/VisibilityListener';\nimport Popover from '@material-ui/core/Popover';\nimport SettingsGroup from '../Components/SettingsGroup'\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ContactlessIcon from '@material-ui/icons/Contactless';\nimport CommandGroup from '../Components/CommandGroup';\nimport EditableSetting from '../Components/EditableSetting';\nimport copyToClipboard from '../Utils/CopyToClipboard';\n\nconst styles = theme => ({\n    imageContainer: {\n        padding: theme.spacing(2),\n        height: 200,\n        width: 200,\n    },\n    root: {\n        padding: theme.spacing(3, 2),\n        margin: theme.spacing(2),\n    },\n    detailsContainer: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n})\n\nconst onButtonTheme = createMuiTheme({\n    palette: {\n        primary: blue,\n    },\n});\n\nconst powerRegex = RegExp('POWER\\D*')\nconst dimmerRegex = RegExp('Dimmer\\D*')\n\n\nconst DimmerSlider = withStyles({\n    root: {\n        color: '#52af77',\n        height: 8,\n        width: 300,\n        paddingTop: 70,\n        paddingBottom: 10,\n        paddingLeft: 10,\n        paddingRight: 10,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus,&:hover,&$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\nclass TasmotaDevice extends Component {\n\n    deviceConnector = null;\n    deviceConfig = null;\n\n    constructor(props) {\n        super(props);\n        this.macAddress = this.props.macAddress;\n        this.state = {\n            deviceInfo: null,\n            dimmerAnchors: {},\n            online: false,\n        }\n    }\n\n    onWindowVisibilityChanged(visible) {\n        if (visible) {\n            this.deviceConnector.resume();\n        } else {\n            this.deviceConnector.pause();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.macAddress !== this.macAddress) {\n            this.deviceConnector.disconnect();\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(nextProps.macAddress, this.props.deviceManager.getDevice(nextProps.macAddress).status0Response.StatusNET.IPAddress);\n            this.deviceConfig = this.props.deviceManager.getTasmotaConfig(nextProps.macAddress)\n            this.deviceConnector.connect();\n        }\n    }\n\n    componentWillMount() {\n        this.deviceConfig = this.props.deviceManager.getTasmotaConfig(this.macAddress)\n        this.setState({\n            deviceInfo: this.props.deviceManager.getDevice(this.macAddress)\n        })\n        if (!this.deviceConnector) {\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(this.macAddress, this.props.deviceManager.getDevice(this.macAddress).status0Response.StatusNET.IPAddress);\n        }\n        this.setState({\n            online: this.deviceConnector.online\n        })\n        this.deviceConnector.connect(this);\n        VisibilityListener.addVisibilityChangeCallback(this.onWindowVisibilityChanged.bind(this));\n    }\n\n    componentWillUnmount() {\n        VisibilityListener.removeVisibilityChangeCallback(this.onWindowVisibilityChanged.bind(this));\n        this.deviceConnector.disconnect();\n    }\n\n    updateDeviceInfoState(updatedInfo) {\n        this.setState({ deviceInfo: { ...this.state.deviceInfo, ...updatedInfo } })\n        this.props.deviceManager.updateDevice(this.macAddress, updatedInfo)\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        // console.log('State %s cmnd: %s response : %O', this.state.displayName, cmnd, response)\n\n        this.setState({ online: success });\n\n        if (success) {\n\n            if (cmnd === 'Status 0') {\n                // console.log('Status0 %s :  %O', this.macAddress, response);\n                this.updateDeviceInfoState({ status0Response: response })\n            } else if (cmnd === 'Template') {\n                this.updateDeviceInfoState({ templateResponse: response })\n                this.deviceConnector.performCommandOnDevice('GPIOS 255')\n            } else if (cmnd === 'GPIO 255') {\n                // console.log('GPIO Response : %O', response)\n                this.updateDeviceInfoState({ gpio255Response: response })\n                this.deviceConnector.performCommandOnDevice('GPIOS 255')\n            } else if (cmnd === 'GPIOS 255') {\n                this.updateDeviceInfoState({ gpiosResponse: response })\n            } else if (cmnd === 'State') {\n\n                if (response.Module) {\n                    delete response.Module\n                }\n\n                var status0Clone = Object.assign({}, this.state.deviceInfo.status0Response);\n\n                var statusNames = Object.keys(status0Clone)\n\n                statusNames.forEach((status) => {\n                    Object.keys(status0Clone[status]).forEach((param) => {\n                        if (response[param]) {\n                            status0Clone[status][param] = response[param]\n                        }\n                    })\n                })\n\n                this.updateDeviceInfoState({ status0Response: status0Clone })\n\n            } else if (cmnd === 'Status 8') {\n\n                var status0Clone = Object.assign({}, this.state.deviceInfo.status0Response);\n                status0Clone.StatusSNS = response.StatusSNS\n\n                this.updateDeviceInfoState({ status0Response: status0Clone })\n            } else if (cmnd === 'Module') {\n                this.updateDeviceInfoState({ moduleResponse: response })\n            } else if (cmnd === 'WifiPower') {\n                this.updateDeviceInfoState({ wifiPowerResponse: response })\n            }\n        }\n    }\n\n    powerToggle(button, event) {\n        event.stopPropagation();\n        console.log('Toggle power ' + button)\n        this.deviceConnector.performCommandOnDevice(button + ' TOGGLE');\n    }\n\n    dimmerUpdate(dimmer, event, newValue) {\n        console.log('Dimmer id : %O, value %O newValue %O', dimmer, event, newValue);\n        event.stopPropagation()\n        this.deviceConnector.performCommandOnDevice(dimmer + ' ' + newValue);\n    }\n\n    getModuleDisplayText() {\n        if (this.state.deviceInfo.moduleResponse) {\n            return this.deviceConfig.moduleResponseFormatter(this.state.deviceInfo.moduleResponse)\n        } else {\n            return this.state.deviceInfo.status0Response.Status.Module\n        }\n    }\n\n    renderTypeTableStatusRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.getModuleDisplayText()}</TableCell>\n                <TableCell><Box flex={1} flexDirection='row'>{this.renderDetailsControlsButtons('Table')}</Box></TableCell>\n                <TableCell>{this.renderDetailsControlsDimmers('Table')}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableHealthRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Uptime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.MqttCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.LinkCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Downtime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Version}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Core}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.BootCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.RestartReason}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.LoadAvg}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Sleep}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableWifiRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.wifiPowerResponse ? this.state.deviceInfo.wifiPowerResponse.WifiPower : 'Unsupported'}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.BSSId}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.LinkCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Downtime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Hostname}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Mac}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.IPAddress}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Gateway}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.SSId}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Channel}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableMqttRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.MqttCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.Status.Topic}</TableCell>\n                <TableCell>'Full Topic - N/A'</TableCell>\n                <TableCell>'Command Topic - N/A'</TableCell>\n                <TableCell>'Stat Topic - N/A'</TableCell>\n                <TableCell>'Tele Topic - N/A'</TableCell>\n                <TableCell>'Fallback Topic - N/A'</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.GroupTopic}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttHost}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttPort}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttClient}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableFirmwareRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Version}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Core}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.SDK}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMEM.ProgramSize}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMEM.Free}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.OtaUrl}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeList() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Box display=\"flex\">\n                    <DeveloperBoardIcon />\n                    <Box display=\"flex\" flexGrow={1} marginLeft={2}>\n                        <Typography>\n                            {/* {this.state.displayName} */}\n                        </Typography>\n                        {this.renderDetailsControlsDimmers()}\n                        {this.renderDetailsControlsButtons()}\n                    </Box>\n                    {this.props.actionButtons}\n                </Box>\n            </div>\n        )\n    }\n\n    renderConnectivityStatus() {\n        return (\n            <Tooltip title={this.state.online ? \"Online\" : \"Offline\"} >\n                <ContactlessIcon color={this.state.online ? \"primary\" : \"secondary\"} />\n            </Tooltip>\n        )\n    }\n\n    renderDetailsImage() {\n        return (\n            <Svg src=\"https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_Symbol_Vector.svg\" width=\"90%\" height=\"90%\" padding=\"20\" />\n        )\n    }\n\n    renderDetailsControlsButtons(type = 'Details') {\n        if (this.state.deviceInfo.status0Response) {\n            let buttons = Object.entries(this.state.deviceInfo.status0Response['StatusSTS']).filter(([key, value]) => {\n                if (powerRegex.test(key)) {\n                    return [key, value];\n                }\n            })\n\n            // console.log('DetailsControls buttons : %O', buttons)\n\n            return buttons.map(([key, value]) => {\n\n                let display = key;\n                if (type === 'Table') {\n                    display = key.replace('POWER', '');\n\n                    if (display === '') {\n                        display = '1'\n                    }\n                }\n\n                if (value === 'ON') {\n                    return (\n                        <ThemeProvider theme={onButtonTheme} key={key}>\n                            <Button variant=\"contained\" key={key} color=\"primary\" onClick={(event) => this.powerToggle(key, event)}>{display}</Button>\n                        </ThemeProvider>\n                    )\n                } else {\n                    return (\n                        <Button variant=\"contained\" key={key} onClick={(event) => this.powerToggle(key, event)}>{display}</Button>\n                    )\n                }\n            })\n        }\n    }\n\n    openDimmerPopover(dimmer, event) {\n        event.stopPropagation()\n        let newAnchors = Object.assign({}, this.state.dimmerAnchors);\n        newAnchors[dimmer] = event.target\n        this.setState({\n            dimmerAnchors: newAnchors,\n        })\n    }\n\n    dimmerPopoverClosed(dimmer, event) {\n        event.stopPropagation()\n        let newAnchors = Object.assign({}, this.state.dimmerAnchors);\n        delete newAnchors[dimmer]\n        this.setState({\n            dimmerAnchors: newAnchors,\n        })\n    }\n\n\n    renderDetailsControlsDimmers(type = 'Details') {\n        if (this.state.deviceInfo.status0Response) {\n            let dimmers = Object.entries(this.state.deviceInfo.status0Response['StatusSTS']).filter(([key, value]) => {\n                if (dimmerRegex.test(key)) {\n                    return [key, value];\n                }\n            })\n\n            // console.log('DetailsControls dimmers : %O', dimmers)\n\n            return dimmers.map(([key, value]) => {\n\n                let display = key + ' ' + value;\n                if (type === 'Table') {\n                    display = key.replace('Dimmer', 'Dim');\n                    display += ':' + value\n                }\n\n                return (\n                    <div>\n                        <Button variant=\"contained\" key={key} onClick={(event) => this.openDimmerPopover(key, event)}>{display}</Button>\n\n                        <Popover\n                            id={'dimmerPop' + key}\n                            open={Boolean(this.state.dimmerAnchors[key])}\n                            anchorEl={this.state.dimmerAnchors[key]}\n                            onClose={(event) => this.dimmerPopoverClosed(key, event)}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                        >\n                            <DimmerSlider\n                                defaultValue={value}\n                                id={key}\n                                aria-labelledby={key + 'slider'}\n                                valueLabelDisplay=\"on\"\n                                step={1}\n                                min={1}\n                                max={100}\n                                onChange={(event, value) => event.stopPropagation()}\n                                onChangeCommitted={(event, value) => this.dimmerUpdate(key, event, value)}\n                            />\n                        </Popover>\n                    </div>\n                )\n            })\n        }\n    }\n\n    renderDetailsStatuses() {\n\n        return Object.entries(this.state.deviceInfo.status0Response).map(([cmnd, cmndData]) => {\n\n            return (\n                <ExpansionPanel key={cmnd}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>{cmnd}</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Key</TableCell>\n                                    <TableCell>Value</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.entries(cmndData).map(([key, value]) => {\n                                    return (\n                                        <TableRow key={key}>\n                                            <TableCell align=\"left\">{key}</TableCell>\n                                            <TableCell align=\"left\">\n                                                <Typography display=\"inline\">\n                                                    {JSON.stringify(value, null, 2)}\n                                                </Typography>\n                                            </TableCell>\n                                        </TableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        </Table>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            )\n\n\n        })\n\n    }\n\n    convertHexStringToBitArray(bytesString) {\n        var bitArray = [];\n        var digitValue = 0;\n        let charArray = bytesString.toLowerCase().split('');\n\n\n        charArray.forEach((char, index) => {\n            digitValue = '0123456789abcdefgh'.indexOf(char);\n            for (let n = 3; n >= 0; n--) {\n                bitArray.push((digitValue >> n) & 1)\n            }\n        })\n\n        // console.log('ByteString: %s to bitArray : %O', bytesString, bitArray.reverse())\n        return bitArray.reverse()\n    }\n\n\n    renderDetailsSetOptions() {\n        return (\n            <ExpansionPanel key=\"SetOptionFlagExpansionPanel\" TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>SetOption Flags</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <List dense >\n                        {this.renderDetailsSetOptionsListItems()}\n                    </List>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n    changeSetOption(setOption, event) {\n        event.stopPropagation()\n        this.deviceConnector.performCommandOnDevice(setOption + (event.target.checked ? ' 1' : ' 0'));\n    }\n\n    renderDetailsSetOptionsListItems() {\n\n        return this.state.deviceInfo.status0Response.StatusLOG.SetOption.map((setOptionStr, index) => {\n            if (index !== 1) {\n                let valueArray = this.convertHexStringToBitArray(setOptionStr)\n                return this.deviceConfig.setOptionsStatusMaps[index].items.map((item, itemIndex) => {\n                    if (item.name !== '' && item.description !== '') {\n                        var soValue = itemIndex + this.deviceConfig.setOptionsStatusMaps[index].setOptionStart;\n                        // console.log('SetOption%d (%s) : %d', soValue, item.name, valueArray[itemIndex])\n                        return (\n                            <React.Fragment>\n                                <ListItem key={'SetOption' + soValue}>\n                                    <ListItemText id={'checkbox-lable-SetOption' + soValue} primary={`SetOption${soValue}`}\n                                        secondary={item.description} />\n                                    <ListItemSecondaryAction>\n                                        <Checkbox\n                                            edge=\"end\"\n                                            checked={valueArray[itemIndex] === 1}\n                                            onChange={(event) => this.changeSetOption('SetOption' + soValue, event)}\n                                        // disabled\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider variant=\"fullWidth\" component=\"li\" />\n                            </React.Fragment>\n                        )\n                    }\n                })\n            }\n        })\n    }\n\n    getPanelCommandData = command => (event, isExpanded) => {\n        event.stopPropagation()\n        if (isExpanded) {\n            this.deviceConnector.performCommandOnDevice(command);\n        }\n    }\n\n    getGPIOName(gpio) {\n        var keys = Object.keys(this.state.deviceInfo.gpiosResponse)\n\n        if (gpio === 255) {\n            return 'User'\n        }\n\n        for (let n = 0; n < keys.length; n++) {\n            // console.log(\"Keys %s\", this.state.deviceInfo.gpiosResponse[keys[n]])\n            if (!Array.isArray(this.state.deviceInfo.gpiosResponse[keys[n]])) {\n                if (this.state.deviceInfo.gpiosResponse[keys[n]][gpio]) {\n                    return this.state.deviceInfo.gpiosResponse[keys[n]][gpio]\n                }\n            } else {\n                for (let i = 0; i < this.state.deviceInfo.gpiosResponse[keys[n]].length; i++) {\n                    if (this.state.deviceInfo.gpiosResponse[keys[n]][i].startsWith(gpio.toString() + ' ')) {\n                        return this.state.deviceInfo.gpiosResponse[keys[n]][i].replace(gpio.toString(), \"\")\n                    }\n                }\n            }\n        }\n\n        return 'Unknown'\n    }\n\n    renderTemplateResponse() {\n        return (\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>NAME</TableCell>\n                        <TableCell>{this.state.deviceInfo.templateResponse.NAME}</TableCell>\n                    </TableRow>\n\n                    {\n                        this.state.deviceInfo.templateResponse.GPIO.map((gpio, index) => {\n                            return (\n                                <TableRow>\n                                    <TableCell>{`GPIO${index}`}</TableCell>\n                                    <TableCell>{`${gpio} ( ${this.getGPIOName(gpio)} )`}</TableCell>\n                                </TableRow>\n                            )\n                        })\n                    }\n\n                    <TableRow>\n                        <TableCell>FLAG</TableCell>\n                        <TableCell>{this.state.deviceInfo.templateResponse.FLAG}</TableCell>\n                    </TableRow>\n\n                    <TableRow>\n                        <TableCell>BASE</TableCell>\n                        <TableCell>{this.state.deviceInfo.templateResponse.BASE}</TableCell>\n                    </TableRow>\n\n                </TableBody>\n            </Table>\n\n        )\n    }\n\n    renderDetailsTemplate() {\n        return (\n            <ExpansionPanel key=\"TemplateDetailsExpansionPanel\" onChange={this.getPanelCommandData('Template')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>Template</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    {!this.state.deviceInfo.templateResponse || !this.state.deviceInfo.gpiosResponse ? <CircularProgress /> :\n                        this.renderTemplateResponse()\n                    }\n\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n    renderGPIOResponse() {\n\n        return (\n            <Table size=\"small\">\n                <TableBody>\n\n                    {this.deviceConfig.gpioResponseFormatter(this.state.deviceInfo.gpio255Response).map((gpioObj, index) => {\n                        return (\n                            <TableRow>\n                                <TableCell>{gpioObj.gpio}</TableCell>\n                                <TableCell>{gpioObj.gpioInfo}</TableCell>\n                            </TableRow>\n                        )\n                    })}\n\n                </TableBody>\n            </Table>\n        )\n    }\n\n    renderDetailsGPIO() {\n        return (\n            <ExpansionPanel key=\"GPIODetailsExpansionPanel\" onChange={this.getPanelCommandData('GPIO 255')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>Module GPIO</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    {!this.state.deviceInfo.gpio255Response || !this.state.deviceInfo.gpiosResponse ? <CircularProgress /> :\n                        this.renderGPIOResponse()\n                    }\n\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n    renderDetailsConnectivity() {\n        return (\n            <React.Fragment>\n                <ExpansionPanel key=\"ConnectivityDetailsExpansionPanel\">\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>Connectivity</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Table size=\"small\">\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi AP</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.SSId}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi Strength</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi Channel</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Channel}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi BSSID</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.BSSId}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            </React.Fragment>\n        )\n    }\n\n    renderTypeSettings() {\n\n\n        return (\n            <React.Fragment>\n\n                {this.deviceConfig.settingsGroups.map((settings) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <SettingsGroup deviceConnector={this.deviceConnector} settingsGroup={settings} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsSetOptions()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        <Typography>Configuration Section</Typography>\n                    </TableCell>\n                </TableRow>\n\n                {Object.entries(this.deviceConfig.configuration).map(([commandGroupName, commandGroup]) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <CommandGroup groupType=\"Configuration\" commandGroupName={commandGroupName} commandGroup={commandGroup} deviceConnector={this.deviceConnector} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        <Typography>Commands Section</Typography>\n                    </TableCell>\n                </TableRow>\n\n                {Object.entries(this.deviceConfig.commands).map(([commandGroupName, commandGroup]) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <CommandGroup groupType=\"Commands\" commandGroupName={commandGroupName} commandGroup={commandGroup} deviceConnector={this.deviceConnector} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n\n            </React.Fragment>\n        )\n    }\n\n    renderTypeDetails() {\n\n        return (\n            <React.Fragment>\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsConnectivity()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsGPIO()}\n                    </TableCell>\n                </TableRow>\n\n                {this.state.deviceInfo.status0Response.Status.Module === 0 ? (\n                    <TableRow>\n                        <TableCell colSpan={3}>\n                            {this.renderDetailsTemplate()}\n                        </TableCell>\n                    </TableRow>\n\n                )\n                    : null}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsSetOptions()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell align=\"left\"><Typography>Status Report</Typography></TableCell>\n                    <TableCell align=\"center\" colSpan={2}>\n                        <Button variant=\"contained\" key=\"copy-to-clipboard-button\" onClick={(event) => copyToClipboard(JSON.stringify(this.state.deviceInfo.status0Response, null, 2))}>Copy to clipboard</Button>\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsStatuses()}\n                    </TableCell>\n                </TableRow>\n            </React.Fragment>\n        )\n    }\n\n    renderTypeSettingsAndDetails(renderType) {\n        return (\n            <React.Fragment>\n                <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyItems=\"center\" justifyContent=\"center\">\n                    <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\" justifyContent=\"space-around\" alignItems=\"center\">\n                        <Paper align=\"center\" style={{ width: 200, height: 200 }}>\n                            {this.renderDetailsImage()}\n                        </Paper>\n                    </Box>\n                    <Table size=\"medium\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell colSpan={2}></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>FriendlyName</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>\n                                    <EditableSetting deviceConnector={this.deviceConnector} command=\"FriendlyName1\" currentValue={this.state.deviceInfo.status0Response.Status.FriendlyName[0]} />\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>Relays</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>{this.renderDetailsControlsButtons('Table')}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>Light Controls</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>{this.renderDetailsControlsDimmers('Table')}</TableCell>\n                            </TableRow>\n\n                            {renderType === 'Details' ? this.renderTypeDetails() : null}\n                            {renderType === 'Settings' ? this.renderTypeSettings() : null}\n\n                        </TableBody>\n                    </Table>\n\n                </Box>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        // console.log('Tasmota Device renderType : %s', this.props.renderType)\n        switch (this.props['renderType']) {\n            case 'List':\n                return this.renderTypeList();\n\n            case 'Settings':\n            case 'Details':\n                return this.renderTypeSettingsAndDetails(this.props.renderType);\n\n            case 'Table_Status':\n                return this.renderTypeTableStatusRow();\n\n            case 'Table_Health':\n                return this.renderTypeTableHealthRow();\n\n            case 'Table_WIFI':\n                return this.renderTypeTableWifiRow()\n\n            case 'Table_Mqtt':\n                return this.renderTypeTableMqttRow()\n\n            case 'Table_Firmware':\n                return this.renderTypeTableFirmwareRow()\n\n\n            default:\n                return (\n                    <Typography>\n                        {/* {this.state.displayName} RenderType : {this.props.renderType} */}\n                    </Typography>\n                )\n                break\n        }\n    }\n}\n\nexport default withStyles(styles)(TasmotaDevice);","export default function(text) {\n    const el = document.createElement('textarea');\n    el.value = text\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n}","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Table from '@material-ui/core/Table';\nimport Box from '@material-ui/core/Box';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport React from 'react';\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\nimport ActionButton from './ActionButton';\n\nclass DeviceList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderItems() {\n        switch (this.props.displayMode) {\n            case \"List\":\n                return this.renderTypeList()\n\n            case \"Table_Status\":\n            case \"Table_Health\":\n            case \"Table_WIFI\":\n            case \"Table_Mqtt\":\n            case \"Table_Firmware\":\n                return this.renderTypeTable()\n\n            case \"Card\":\n                return this.renderTypeCard()\n\n        }\n    }\n\n    renderTypeList() {\n\n        return Object.keys(this.props.devices).map((mac, index) => {\n            let buttons = (\n                <div>\n                    {this.renderButton(\"Details\", \"details\", (event) => this.openDeviceDetails(mac, event), <SettingsApplicationsIcon />)}\n                    {this.renderButton(\"Delete\", \"delete\", (event) => this.deleteDevice(mac, event), <DeleteIcon />)}\n                </div>\n            )\n\n            return (\n                <ExpansionPanel key={mac}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1c-content\"\n                        id=\"panel1c-header\"\n                    >\n                        <TasmotaDevice macAddress={mac} renderType={this.state.displayMode} deviceManager={this.props.deviceManager} actionButtons={buttons} />\n                    </ExpansionPanelSummary>\n                </ExpansionPanel>\n            )\n        })\n    }\n\n    renderTypeCard() {\n        return Object.keys(this.props.devices).map((mac, index) => {\n            return (\n                <TasmotaDevice macAddress={mac} renderType={this.props.displayMode} deviceManager={this.props.deviceManager} />\n            )\n        })\n    }\n\n    renderTableHeaderStatus() {\n        return (\n            <TableRow>\n                <TableCell align=\"center\">Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>Module</TableCell>\n                <TableCell>Power</TableCell>\n                <TableCell>Light Controls</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderHealth() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>Uptime</TableCell>\n                <TableCell>Mqtt Count</TableCell>\n                <TableCell>Link Count</TableCell>\n                <TableCell>Downtime</TableCell>\n                <TableCell>Version</TableCell>\n                <TableCell>Core</TableCell>\n                <TableCell>Boot Count</TableCell>\n                <TableCell>Restart Reason</TableCell>\n                <TableCell>LoadAvg</TableCell>\n                <TableCell>Sleep</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderFirmware() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>Version</TableCell>\n                <TableCell>Core</TableCell>\n                <TableCell>SDK</TableCell>\n                <TableCell>Program Size</TableCell>\n                <TableCell>Free</TableCell>\n                <TableCell>OtaURL</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTableHeaderWifi() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>WifiPower</TableCell>\n                <TableCell>BSSID</TableCell>\n                <TableCell>Link Count</TableCell>\n                <TableCell>Downtime</TableCell>\n                <TableCell>Hostname</TableCell>\n                <TableCell>Mac Address</TableCell>\n                <TableCell>IP Address</TableCell>\n                <TableCell>Gateway</TableCell>\n                <TableCell>SSID</TableCell>\n                <TableCell>Channel</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderMqtt() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>Mqtt Count</TableCell>\n                <TableCell>Topic</TableCell>\n                <TableCell>Full Topic</TableCell>\n                <TableCell>Command Topic</TableCell>\n                <TableCell>Stat Topic</TableCell>\n                <TableCell>Tele Topic</TableCell>\n                <TableCell>Fallback Topic</TableCell>\n                <TableCell>Group Topic</TableCell>\n                <TableCell>Mqtt Host</TableCell>\n                <TableCell>Mqtt Port</TableCell>\n                <TableCell>Mqtt Client</TableCell>\n            </TableRow>\n        )\n    }\n    renderTableHeader() {\n        // console.log(this.props.displayMode)\n        switch (this.props.displayMode) {\n            case 'Table_Status':\n                return this.renderTableHeaderStatus()\n\n            case 'Table_Health':\n                return this.renderTableHeaderHealth()\n\n            case 'Table_WIFI':\n                return this.renderTableHeaderWifi()\n\n            case 'Table_Mqtt':\n                return this.renderTableHeaderMqtt()\n\n            case 'Table_Firmware':\n                return this.renderTableHeaderFirmware()\n\n        }\n    }\n\n    renderTypeTable() {\n        return (\n\n            <Table stickyHeader aria-label=\"simple table\" >\n                {Object.keys(this.props.deviceSections).map((section, index) => {\n                    return (\n                        <React.Fragment>\n                            {Object.keys(this.props.deviceSections[section].devices).length > 0 ?\n                                <TableRow><h3>{section}</h3></TableRow> : null}\n\n                            {index === 0 ?\n                                <TableHead>\n                                    {this.renderTableHeader()}\n                                </TableHead>\n                                : null}\n                            <TableBody>\n                                {Object.keys(this.props.deviceSections[section].devices).map((mac, index) => {\n                                    let buttons = this.props.deviceSections[section].itemButtons.map((button, index) => {\n                                        return (\n                                            <ActionButton\n                                                key={mac + button.label}\n                                                toolTip={button.toolTip}\n                                                label={button.label}\n                                                icon={button.icon}\n                                                onButtonClick={(event) => button.onButtonClick(mac, event)}\n                                            />\n                                        )\n                                    })\n\n                                    return <TasmotaDevice key={mac} macAddress={mac} renderType={this.props.displayMode} deviceManager={this.props.deviceManager} actionButtons={buttons} />\n                                })\n                                }\n                            </TableBody>\n                        </React.Fragment>\n                    )\n                })}\n\n            </Table>\n        )\n    }\n\n    render() {\n        return this.renderItems()\n    }\n}\nexport default DeviceList","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport Box from '@material-ui/core/Box';\nimport HealingIcon from '@material-ui/icons/Healing';\nimport SettingsInputAntennaIcon from '@material-ui/icons/SettingsInputAntenna';\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport WifiIcon from '@material-ui/icons/Wifi';\nimport ActionButton from './ActionButton'\n\nclass DisplayModeButtons extends React.Component {\n\n    render() {\n        return (\n            <Box display=\"flex\" flexGrow={1} justifyContent=\"flex-start\">\n                <ActionButton\n                    toolTip=\"Status View\"\n                    label=\"status\"\n                    icon={<TableChartIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Status\" })}\n                    selected={this.props.displayMode === \"Table_Status\"}\n                    selectedIcon={<TableChartIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Health View\"\n                    label=\"health\"\n                    icon={<HealingIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Health\" })}\n                    selected={this.props.displayMode === \"Table_Health\"}\n                    selectedIcon={<HealingIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Firmware View\"\n                    label=\"firmware\"\n                    icon={<SystemUpdateAltIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Firmware\" })}\n                    selected={this.props.displayMode === \"Table_Firmware\"}\n                    selectedIcon={<SystemUpdateAltIcon color=\"primary\" />}\n                />\n\n\n                <ActionButton\n                    toolTip=\"Wifi View\"\n                    label=\"wifi\"\n                    icon={<WifiIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_WIFI\" })}\n                    selected={this.props.displayMode === \"Table_WIFI\"}\n                    selectedIcon={<WifiIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Mqtt View\"\n                    label=\"MQTT\"\n                    icon={<SettingsInputAntennaIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Mqtt\" })}\n                    selected={this.props.displayMode === \"Table_Mqtt\"}\n                    selectedIcon={<SettingsInputAntennaIcon color=\"primary\" />}\n                />\n\n            </Box>)\n    }\n}\n\nexport default DisplayModeButtons","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport React from 'react';\nimport DeviceList from '../Components/DeviceList';\nimport DisplayTypeButtons from '../Components/DisplayModeButtons';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CallToActionIcon from '@material-ui/icons/CallToAction';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\n\nclass Devices extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            devices: this.props.deviceManager.getDevices(),\n            displayMode: this.props.appConfig.getAppConfig('device_view_mode') || \"Table_Status\",\n        }\n    }\n\n    buttons = [{\n        toolTip: \"Details\",\n        label: \"details\",\n        icon: <InfoIcon />,\n        onButtonClick: (mac, event) => this.openDeviceDetails(mac, event),\n    }, {\n        toolTip: \"Settings\",\n        label: \"settings\",\n        icon: <SettingsApplicationsIcon />,\n        onButtonClick: (mac, event) => this.openDeviceSettings(mac, event),\n    }, {\n        toolTip: \"Console\",\n        label: \"console\",\n        icon: <CallToActionIcon />,\n        onButtonClick: (mac, event) => this.openDeviceConsole(mac, event),\n    }, {\n        toolTip: \"WebUI\",\n        label: \"webui\",\n        icon: <OpenInBrowserIcon />,\n        onButtonClick: (mac, event) => this.openWebUI(mac, event),\n    }, {\n        toolTip: \"Delete\",\n        label: \"delete\",\n        icon: <DeleteIcon />,\n        onButtonClick: (mac, event) => this.deleteDevice(mac, event),\n    }]\n\n    openDeviceDetails = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/details/' + macAddress);\n    }\n\n    openDeviceSettings = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/settings/' + macAddress);\n    }\n\n    openDeviceConsole = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/console/' + macAddress);\n    }\n\n    openWebUI  = (macAddress, event) => {\n        event.stopPropagation();\n        let ip = this.props.deviceManager.getDevice(macAddress).status0Response.StatusNET.IPAddress\n        window.open(`http://${ip}`)\n    }\n\n    deleteDevice = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.deviceManager.removeDevice(macAddress);\n        const newDevices = this.props.deviceManager.getDevices();\n        this.setState({\n            devices: newDevices\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.displayMode !== this.state.displayMode) {\n            this.props.appConfig.putAppConfig('device_view_mode', this.state.displayMode)\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'Devices', { 'value' : this.state.displayMode });\n        window.gtag('event', 'screen_view', { 'screen_name': 'Devices'});\n    }\n\n    render() {\n\n        return (\n            <Box display=\"flex\" flexGrow={1} flexDirection=\"column\" style={{ overflow: \"visible\", position: \"absolute\" }}>\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                    <h1>Devices</h1>\n                    <DisplayTypeButtons displayMode={this.state.displayMode} setState={(state) => this.setState(state)} />\n                </Box>\n                <DeviceList\n                    displayMode={this.state.displayMode}\n                    deviceSections={{ \"\": { devices: this.state.devices, itemButtons: this.buttons } }}\n                    deviceManager={this.props.deviceManager}\n                />\n\n            </Box>\n        );\n    }\n}\nexport default Devices","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport superagent from 'superagent';\n\nconst commands = {\n    Status0: 'Status 0',\n    State: 'State',\n    Status8: 'Status 8',\n    Module: 'Module',\n    WifiPower: 'WifiPower',\n}\n\nclass TasmotaDeviceConnector {\n\n    deviceIPAddress = \"\";\n    deviceListeners = [];\n    timer = null;\n    // responseMap = [{}];\n\n    constructor(ipAddress, authInfo) {\n        this.deviceIPAddress = ipAddress;\n        this.online = false;\n        this.authInfo = authInfo\n    }\n\n    updateIpAddress(ipAddress) {\n        if (this.deviceIPAddress !== ipAddress) {\n            this.deviceIPAddress = ipAddress\n            this.requestDeviceStatus()\n        }\n    }\n\n    connect(listener) {\n        let index = this.deviceListeners.indexOf(listener)\n        if (index === -1) {\n            this.deviceListeners.push(listener);\n        }\n\n        if (this.deviceListeners.length === 1) {\n            this.resume();\n        }\n    }\n\n    disconnect(listener) {\n        let index = this.deviceListeners.indexOf(listener)\n        if (index !== -1) {\n            this.deviceListeners.splice(index, 1)\n        }\n\n        if (this.deviceListeners.length === 0) {\n            this.pause();\n        }\n    }\n\n    disconnectAll() {\n        this.deviceListeners.forEach((listener) => {\n            this.disconnect(listener)\n        })\n    }\n\n    pause() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    }\n\n    resume() {\n        this.pause(); // Clear previous Timer\n        this.timer = setInterval(this.requestDeviceStatus.bind(this), 15000);\n        this.getStatus0();\n    }\n\n    requestDeviceStatus() {\n        this.getState()\n    }\n\n    getStatus0() {\n        this.performCommandOnDeviceDirect(commands.Status0);\n    }\n\n    getWifiPower() {\n        this.performCommandOnDeviceDirect(commands.WifiPower);\n    }\n\n    getModule() {\n        this.performCommandOnDeviceDirect(commands.Module);\n    }\n\n    getState() {\n        this.performCommandOnDeviceDirect(commands.State);\n    }\n\n    getStatus8() {\n        this.performCommandOnDeviceDirect(commands.Status8);\n    }\n\n    onCommandResponse(args) {\n        if (args.key === commands.State || args.key === commands.Status0) {\n            this.online = args.success\n        }\n        console.log(`Command ${args.key} Url : ${args.url} Response: %O`, args.response ? args.response.body : null)\n        this.deviceListeners.forEach(function (deviceListener, index) {\n            deviceListener.onCommandResponse(args.key, args.success, args.success ? args.response.body : null)\n        });\n\n        if (!args.success) {\n            console.log(`Command ${args.key} failed. Url : ${args.url} Response: %O`, args.response)\n        }\n\n        if (args.key === commands.State) {\n            this.getStatus8()\n        } else if (args.key === commands.Status0) {\n            this.getModule()\n        } else if (args.key === commands.Module) {\n            this.getWifiPower()\n        }\n    }\n\n    performCommandOnDevice(cmnd) {\n        this.performCommandOnDeviceDirect(cmnd);\n        this.getStatus0();\n    }\n\n    performCommandOnDeviceDirect(cmnd) {\n        var callback = function (err, response) {\n            // console.log (\"Error : %O Response : %O\", err, response);\n            this.onCommandResponse({ key: this.cmnd, response: response, error: err, url: this.url, ip: this.ip, success: err ? false : true });\n        }\n        let url = 'http://' + this.deviceIPAddress + '/cm?cmnd=' + encodeURIComponent(cmnd);\n\n        if (this.authInfo) {\n            url += `&user=${encodeURIComponent(this.authInfo.username)}&password=${encodeURIComponent(this.authInfo.password)}`\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 60000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind({ onCommandResponse: this.onCommandResponse.bind(this), ip: this.deviceIPAddress, url: url, cmnd: cmnd }))\n    }\n}\n\nexport default TasmotaDeviceConnector;","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport Commands from './Commands.json'\n\nconst TasmotaConfig_06070000 = {\n    setOptionsStatusMaps: [{\n        structName: \"SysBitfield\",\n        setOptionStart: 0,\n        bitSize: 1,\n        items: [\n            {\n                name: 'save_state',\n                description: 'Save power state and use after restart',\n            }, {\n                name: 'button_restrict',\n                description: 'Control button multipress',\n            }, {\n                name: 'ex_value_units',\n                description: 'Add units to JSON messages',\n            }, {\n                name: 'mqtt_enabled',\n                description: 'Control MQTT',\n            }, {\n                name: 'mqtt_response',\n                description: 'Switch between MQTT Result or Command',\n            }, {\n                name: 'mqtt_power_retain',\n                description: '',\n            }, {\n                name: 'mqtt_button_retain',\n                description: '',\n            }, {\n                name: 'mqtt_switch_retain',\n                description: '',\n            }, {\n                name: 'temperature_conversion',\n                description: 'Switch between Celsius or Fahreheit',\n            }, {\n                name: 'mqtt_sensor_retain',\n                description: 'CMDN_SENSORRETAIN',\n            }, {\n                name: 'mqtt_offline',\n                description: 'Control MQTT LWT message format',\n            }, {\n                name: 'button_swap',\n                description: 'Swap button single and double press functionality',\n            }, {\n                name: 'stop_flash_rotate',\n                description: 'Switch between dynamic or fixed slot flash save location',\n            }, {\n                name: 'button_single',\n                description: 'Support only single press to speed up button press recognition',\n            }, {\n                name: 'interlock',\n                description: '',\n            }, {\n                name: 'pwm_control',\n                description: 'Switch between commands PWM or COLOR/DIMMER/CT/CHANNEL',\n            }, {\n                name: 'ws_clock_reverse',\n                description: 'Set addressable LED Clock scheme parameter',\n            }, {\n                name: 'decimal_text',\n                description: 'Switch between decimal or hexadecimal output',\n            }, {\n                name: 'light_signal',\n                description: 'Pair light signal with CO2 sensor',\n            }, {\n                name: 'hass_discovery',\n                description: 'Control Home Assistant Automatic discovery',\n            }, {\n                name: 'not_power_linked',\n                description: 'Control power in relation fo Dimmer/Color/CT changes',\n            }, {\n                name: 'no_power_on_check',\n                description: 'Show voltage even if powered off',\n            }, {\n                name: 'mqtt_serial',\n                description: '',\n            }, {\n                name: 'mqtt_serial_raw',\n                description: '',\n            }, {\n                name: 'pressure_conversion',\n                description: 'Switch between hPa or mmHg pressure unit',\n            }, {\n                name: 'knx_enabled',\n                description: '',\n            }, {\n                name: 'device_index_enable',\n                description: 'Switch between POWER or POWER1',\n            }, {\n                name: 'knx_enable_enhancement',\n                description: '',\n            }, {\n                name: 'rf_receive_decimal',\n                description: 'RF Receive data format',\n            }, {\n                name: 'ir_receive_decimal',\n                description: 'IR Receive data format',\n            }, {\n                name: 'hass_light',\n                description: 'Enforce HASS Autodiscovery as light',\n            }, {\n                name: 'global_state',\n                description: 'Control link led blinking',\n            }\n        ]\n    }, {\n        structName: \"SysBitfield2\",\n        setOptionStart: 32,\n        bitSize: 1,\n        items: [],\n    }, {\n        structName: \"SysBitfield3\",\n        setOptionStart: 50,\n        bitSize: 1,\n        items: [\n            {\n                name: 'timers_enable',\n                description: '',\n            }, {\n                name: 'user_esp8285_enable',\n                description: 'Enable ESP8285 User GPIOs',\n            }, {\n                name: 'time_append_timezone',\n                description: 'Append timezone to JSON time',\n            }, {\n                name: 'gui_hostname_ip',\n                description: 'Show hostname and IP address in GUI main menu',\n            }, {\n                name: 'tuya_apply_o20',\n                description: 'Apple SetOption20 settings to Tuya device',\n            }, {\n                name: 'mdns_enabled',\n                description: 'Control mDNS Service',\n            }, {\n                name: 'use_wifi_scan',\n                description: 'Scan wifi network at restart for configured APs',\n            }, {\n                name: 'use_wifi_rescan',\n                description: 'Scan wifi network every 44 minutes for configured APs',\n            }, {\n                name: 'receive_raw',\n                description: 'Add IR Raw data to JSON message',\n            }, {\n                name: 'hass_tele_on_power',\n                description: 'Send tele/%topic%/STATE in addition to stat/%topic%/RESULT',\n            }, {\n                name: 'sleep_normal',\n                description: 'Enable normal sleep instead of dynamic sleep',\n            }, {\n                name: 'button_switch_force_local',\n                description: 'Force local operation when button/switch topic is set',\n            }, {\n                name: 'no_hold_retain',\n                description: 'Don\\'t use retain flag on HOLD messages',\n            }, {\n                name: 'no_power_feedback',\n                description: 'Don\\'t scan relay power state at restart',\n            }, {\n                name: 'use_underscore',\n                description: 'Enable \"_\" instead of \"=\" as sensor index separator',\n            }, {\n                name: 'fast_power_cycle_disable',\n                description: 'Disable fast power cycle detection for device reset',\n            }, {\n                name: 'tuya_serial_mqtt_publish',\n                description: 'Enable TuyaReceived messages over Mqtt',\n            }, {\n                name: 'buzzer_enable',\n                description: 'Enable buzzer when available',\n            }, {\n                name: 'pwm_multi_channels',\n                description: 'Enable multi-channels PWM instead of Color PWM',\n            }, {\n                name: 'ex_tuya_dimmer_min_limit',\n                description: '',\n            }, {\n                name: 'energy_weekend',\n                description: '',\n            }, {\n                name: 'dds2382_model',\n                description: 'Select different Modbus registers for Active Energy',\n            }, {\n                name: 'hardware_energy_total',\n                description: 'Enable / Disable hardware energy total counter as reference',\n            }, {\n                name: 'cors_enabled',\n                description: 'Enable HTTP CORS',\n            }, {\n                name: 'ds18x20_internal_pullup',\n                description: 'Enable internal pullip for single DS18x20 sensor',\n            }, {\n                name: 'grouptopic_mode',\n                description: 'GroupTopic replaces %topic% (0) or fixed topic cmnd/grouptopic(1)',\n            }, {\n                name: 'spare26',\n                description: '',\n            }, {\n                name: 'spare27',\n                description: '',\n            }, {\n                name: 'spare28',\n                description: '',\n            }, {\n                name: 'spare29',\n                description: '',\n            }, {\n                name: 'shutter_mode',\n                description: 'Enable shutter support',\n            }, {\n                name: 'pcf8574_ports_inverted',\n                description: 'Invert all ports on PCF8574 devices',\n            }\n        ]\n    }, {\n        structName: \"SysBitfield4\",\n        setOptionStart: 82,\n        bitSize: 1,\n        items: [\n            {\n                name: 'spare00',\n                description: '',\n            }, {\n                name: 'spare01',\n                description: '',\n            }, {\n                name: 'spare02',\n                description: '',\n            }, {\n                name: 'spare03',\n                description: '',\n            }, {\n                name: 'spare04',\n                description: '',\n            }, {\n                name: 'spare05',\n                description: '',\n            }, {\n                name: 'spare06',\n                description: '',\n            }, {\n                name: 'spare07',\n                description: '',\n            }, {\n                name: 'spare08',\n                description: '',\n            }, {\n                name: 'spare09',\n                description: '',\n            }, {\n                name: 'spare10',\n                description: '',\n            }, {\n                name: 'spare11',\n                description: '',\n            }, {\n                name: 'spare12',\n                description: '',\n            }, {\n                name: 'spare13',\n                description: '',\n            }, {\n                name: 'spare14',\n                description: '',\n            }, {\n                name: 'spare15',\n                description: '',\n            }, {\n                name: 'spare16',\n                description: '',\n            }, {\n                name: 'spare17',\n                description: '',\n            }, {\n                name: 'spare18',\n                description: '',\n            }, {\n                name: 'spare19',\n                description: '',\n            }, {\n                name: 'spare20',\n                description: '',\n            }, {\n                name: 'spare21',\n                description: '',\n            }, {\n                name: 'spare22',\n                description: '',\n            }, {\n                name: 'spare23',\n                description: '',\n            }, {\n                name: 'spare24',\n                description: '',\n            }, {\n                name: 'spare25',\n                description: '',\n            }, {\n                name: 'spare26',\n                description: '',\n            }, {\n                name: 'spare27',\n                description: '',\n            }, {\n                name: 'spare28',\n                description: '',\n            }, {\n                name: 'spare29',\n                description: '',\n            }, {\n                name: 'spare30',\n                description: '',\n            }, {\n                name: 'spare31',\n                description: '',\n            }\n        ]\n    }],\n    settingsGroups: [{\n        groupName: \"Mqtt Settings\",\n        settings: [{\n            name: 'Mqtt Host',\n            command: 'MqttHost',\n        }, {\n            name: 'Mqtt User',\n            command: 'MqttUser',\n        }, {\n            name: 'Mqtt Password',\n            command: 'MqttPassword',\n        }]\n    }, {\n        groupName: \"Wifi Settings\",\n        settings: [{\n            name: 'Ssid 1',\n            command: 'Ssid1',\n        }, {\n            name: 'Password 1',\n            command: 'Password1',\n        }, {\n            name: 'Ssid 2',\n            command: 'Ssid2',\n        }, {\n            name: 'Password 2',\n            command: 'Password2',\n        }, {\n            name: 'Hostname',\n            command: 'Hostname',\n        }]\n        // } ,{\n        //     groupName: 'Rules',\n        //     settings: [{\n        //         name: 'Rule 1',\n        //         command: 'Rule1',\n        //     },{\n        //         name: 'Rule 2',\n        //         command: 'Rule2'\n        //     },{\n        //         name: 'Rule 3',\n        //         command: 'Rule3'\n        //     }]\n    }],\n    moduleResponseFormatter: function (moduleResponse) {\n        if (typeof moduleResponse.Module === 'object') {\n            let key = Object.keys(moduleResponse.Module)[0]\n            return `${key} (${moduleResponse.Module[key]})`\n        } else {\n            return moduleResponse.Module\n        }\n    },\n    gpioResponseFormatter: function (gpioResponse) {\n        return Object.keys(gpioResponse).map((gpio, index) => {\n            if (typeof gpioResponse[gpio] === 'object') {\n                var key = Object.keys(gpioResponse[gpio])[0]\n                return { gpio: gpio, gpioInfo: `${key} ( ${gpioResponse[gpio][key]} )` }\n            } else {\n                return { gpio: gpio, gpioInfo: gpioResponse[gpio] }\n            }\n        })\n    },\n    commands: Commands,\n    configuration: {\n        Button: {\n            ButtonDebounce: Commands.Control.ButtonDebounce,\n            ButtonRetain: Commands.MQTT.ButtonRetain,\n            SetOption11: Commands.SetOptions.SetOption11,\n            SetOption13: Commands.SetOptions.SetOption13,\n            SetOption32: Commands.SetOptions.SetOption32,\n            SetOption40: Commands.SetOptions.SetOption40,\n            SetOption61: Commands.SetOptions.SetOption61,\n        },\n        Switch: {\n            SwitchDebounce: Commands.Control.ButtonDebounce,\n            SwitchRetain: Commands.MQTT.ButtonRetain,\n            'SwitchMode<x>': Commands.Control['SwitchMode<x>'],\n            SetOption32: Commands.SetOptions.SetOption32,\n        },\n        Relay: {\n            BlinkCount: Commands.Control.BlinkCount,\n            BlinkTime: Commands.Control.BlinkTime,\n            PowerOnState: Commands.Control.PowerOnState,\n            PowerRetain: Commands.MQTT.PowerRetain,\n            Interlock: Commands.Control.Interlock,\n            'PusleTime<x>': Commands.Control['PulseTime<x>'],\n            SetOption0: Commands.SetOptions.SetOption0,\n            SetOption26: Commands.SetOptions.SetOption26,\n            SetOption63: Commands.SetOptions.SetOption63,\n        }\n    }\n\n}\n\nexport default TasmotaConfig_06070000","import TasmotaConfig_06070000 from './TasmotaConfig-6.7.0.0'\n\nfunction updatedConfig() {\n\n    let TasmotaConfig_07010200 = {\n        settingsGroups: TasmotaConfig_06070000.settingsGroups,\n        moduleResponseFormatter: TasmotaConfig_06070000.moduleResponseFormatter,\n        gpioResponseFormatter: TasmotaConfig_06070000.gpioResponseFormatter,\n        commands: {},\n        configuration: TasmotaConfig_06070000.configuration,\n    }\n\n    TasmotaConfig_07010200.setOptionsStatusMaps =\n        [{\n            structName: \"SysBitfield\",\n            setOptionStart: 0,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'save_state',\n                    description: 'Save power state and use after restart',\n                }, {\n                    name: 'button_restrict',\n                    description: 'Control button multipress',\n                }, {\n                    name: 'ex_value_units',\n                    description: 'Add units to JSON messages',\n                }, {\n                    name: 'mqtt_enabled',\n                    description: 'Control MQTT',\n                }, {\n                    name: 'mqtt_response',\n                    description: 'Switch between MQTT Result or Command',\n                }, {\n                    name: 'mqtt_power_retain',\n                    description: '',\n                }, {\n                    name: 'mqtt_button_retain',\n                    description: '',\n                }, {\n                    name: 'mqtt_switch_retain',\n                    description: '',\n                }, {\n                    name: 'temperature_conversion',\n                    description: 'Switch between Celsius or Fahreheit',\n                }, {\n                    name: 'mqtt_sensor_retain',\n                    description: 'CMDN_SENSORRETAIN',\n                }, {\n                    name: 'mqtt_offline',\n                    description: 'Control MQTT LWT message format',\n                }, {\n                    name: 'button_swap',\n                    description: 'Swap button single and double press functionality',\n                }, {\n                    name: 'stop_flash_rotate',\n                    description: 'Switch between dynamic or fixed slot flash save location',\n                }, {\n                    name: 'button_single',\n                    description: 'Support only single press to speed up button press recognition',\n                }, {\n                    name: 'interlock',\n                    description: '',\n                }, {\n                    name: 'pwm_control',\n                    description: 'Switch between commands PWM or COLOR/DIMMER/CT/CHANNEL',\n                }, {\n                    name: 'ws_clock_reverse',\n                    description: 'Set addressable LED Clock scheme parameter',\n                }, {\n                    name: 'decimal_text',\n                    description: 'Switch between decimal or hexadecimal output',\n                }, {\n                    name: 'light_signal',\n                    description: 'Pair light signal with CO2 sensor',\n                }, {\n                    name: 'hass_discovery',\n                    description: 'Control Home Assistant Automatic discovery',\n                }, {\n                    name: 'not_power_linked',\n                    description: 'Control power in relation fo Dimmer/Color/CT changes',\n                }, {\n                    name: 'no_power_on_check',\n                    description: 'Show voltage even if powered off',\n                }, {\n                    name: 'mqtt_serial',\n                    description: '',\n                }, {\n                    name: 'mqtt_serial_raw',\n                    description: '',\n                }, {\n                    name: 'pressure_conversion',\n                    description: 'Switch between hPa or mmHg pressure unit',\n                }, {\n                    name: 'knx_enabled',\n                    description: '',\n                }, {\n                    name: 'device_index_enable',\n                    description: 'Switch between POWER or POWER1',\n                }, {\n                    name: 'knx_enable_enhancement',\n                    description: '',\n                }, {\n                    name: 'rf_receive_decimal',\n                    description: 'RF Receive data format',\n                }, {\n                    name: 'ir_receive_decimal',\n                    description: 'IR Receive data format',\n                }, {\n                    name: 'hass_light',\n                    description: 'Enforce HASS Autodiscovery as light',\n                }, {\n                    name: 'global_state',\n                    description: 'Control link led blinking',\n                }\n            ]\n        }, {\n            structName: \"SysBitfield2\",\n            setOptionStart: 32,\n            bitSize: 1,\n            items: [],\n        }, {\n            structName: \"SysBitfield3\",\n            setOptionStart: 50,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'timers_enable',\n                    description: '',\n                }, {\n                    name: 'user_esp8285_enable',\n                    description: 'Enable ESP8285 User GPIOs',\n                }, {\n                    name: 'time_append_timezone',\n                    description: 'Append timezone to JSON time',\n                }, {\n                    name: 'gui_hostname_ip',\n                    description: 'Show hostname and IP address in GUI main menu',\n                }, {\n                    name: 'tuya_apply_o20',\n                    description: 'Apple SetOption20 settings to Tuya device',\n                }, {\n                    name: 'mdns_enabled',\n                    description: 'Control mDNS Service',\n                }, {\n                    name: 'use_wifi_scan',\n                    description: 'Scan wifi network at restart for configured APs',\n                }, {\n                    name: 'use_wifi_rescan',\n                    description: 'Scan wifi network every 44 minutes for configured APs',\n                }, {\n                    name: 'receive_raw',\n                    description: 'Add IR Raw data to JSON message',\n                }, {\n                    name: 'hass_tele_on_power',\n                    description: 'Send tele/%topic%/STATE in addition to stat/%topic%/RESULT',\n                }, {\n                    name: 'sleep_normal',\n                    description: 'Enable normal sleep instead of dynamic sleep',\n                }, {\n                    name: 'button_switch_force_local',\n                    description: 'Force local operation when button/switch topic is set',\n                }, {\n                    name: 'no_hold_retain',\n                    description: 'Don\\'t use retain flag on HOLD messages',\n                }, {\n                    name: 'no_power_feedback',\n                    description: 'Don\\'t scan relay power state at restart',\n                }, {\n                    name: 'use_underscore',\n                    description: 'Enable \"_\" instead of \"=\" as sensor index separator',\n                }, {\n                    name: 'fast_power_cycle_disable',\n                    description: 'Disable fast power cycle detection for device reset',\n                }, {\n                    name: 'tuya_serial_mqtt_publish',\n                    description: 'Enable TuyaReceived messages over Mqtt',\n                }, {\n                    name: 'buzzer_enable',\n                    description: 'Enable buzzer when available',\n                }, {\n                    name: 'pwm_multi_channels',\n                    description: 'Enable multi-channels PWM instead of Color PWM',\n                }, {\n                    name: 'ex_tuya_dimmer_min_limit',\n                    description: '',\n                }, {\n                    name: 'energy_weekend',\n                    description: '',\n                }, {\n                    name: 'dds2382_model',\n                    description: 'Select different Modbus registers for Active Energy',\n                }, {\n                    name: 'hardware_energy_total',\n                    description: 'Enable / Disable hardware energy total counter as reference',\n                }, {\n                    name: 'cors_enabled',\n                    description: 'Enable HTTP CORS',\n                }, {\n                    name: 'ds18x20_internal_pullup',\n                    description: 'Enable internal pullip for single DS18x20 sensor',\n                }, {\n                    name: 'grouptopic_mode',\n                    description: 'GroupTopic replaces %topic% (0) or fixed topic cmnd/grouptopic(1)',\n                }, {\n                    name: 'bootcount_update',\n                    description: 'Enable incrementing bootcount when deepsleep is enabled',\n                }, {\n                    name: 'slider_dimmer_stay_on',\n                    description: 'Do not power off if slider moved to far left',\n                }, {\n                    name: 'spare28',\n                    description: '',\n                }, {\n                    name: 'spare29',\n                    description: '',\n                }, {\n                    name: 'shutter_mode',\n                    description: 'Enable shutter support',\n                }, {\n                    name: 'pcf8574_ports_inverted',\n                    description: 'Invert all ports on PCF8574 devices',\n                }\n            ]\n        }, {\n            structName: \"SysBitfield4\",\n            setOptionStart: 82,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'spare00',\n                    description: '',\n                }, {\n                    name: 'spare01',\n                    description: '',\n                }, {\n                    name: 'spare02',\n                    description: '',\n                }, {\n                    name: 'spare03',\n                    description: '',\n                }, {\n                    name: 'spare04',\n                    description: '',\n                }, {\n                    name: 'spare05',\n                    description: '',\n                }, {\n                    name: 'spare06',\n                    description: '',\n                }, {\n                    name: 'spare07',\n                    description: '',\n                }, {\n                    name: 'spare08',\n                    description: '',\n                }, {\n                    name: 'spare09',\n                    description: '',\n                }, {\n                    name: 'spare10',\n                    description: '',\n                }, {\n                    name: 'spare11',\n                    description: '',\n                }, {\n                    name: 'spare12',\n                    description: '',\n                }, {\n                    name: 'spare13',\n                    description: '',\n                }, {\n                    name: 'spare14',\n                    description: '',\n                }, {\n                    name: 'spare15',\n                    description: '',\n                }, {\n                    name: 'spare16',\n                    description: '',\n                }, {\n                    name: 'spare17',\n                    description: '',\n                }, {\n                    name: 'spare18',\n                    description: '',\n                }, {\n                    name: 'spare19',\n                    description: '',\n                }, {\n                    name: 'spare20',\n                    description: '',\n                }, {\n                    name: 'spare21',\n                    description: '',\n                }, {\n                    name: 'spare22',\n                    description: '',\n                }, {\n                    name: 'spare23',\n                    description: '',\n                }, {\n                    name: 'spare24',\n                    description: '',\n                }, {\n                    name: 'spare25',\n                    description: '',\n                }, {\n                    name: 'spare26',\n                    description: '',\n                }, {\n                    name: 'spare27',\n                    description: '',\n                }, {\n                    name: 'spare28',\n                    description: '',\n                }, {\n                    name: 'spare29',\n                    description: '',\n                }, {\n                    name: 'spare30',\n                    description: '',\n                }, {\n                    name: 'spare31',\n                    description: '',\n                }\n            ]\n        }]\n\n\n    for(let commandType in TasmotaConfig_06070000.commands) {\n        TasmotaConfig_07010200.commands[commandType] = {}\n        for(let command in TasmotaConfig_06070000.commands[commandType]) {\n            TasmotaConfig_07010200.commands[commandType][command] = TasmotaConfig_06070000.commands[commandType][command]\n        }\n    }\n\n    TasmotaConfig_07010200.commands.SetOptions.SetOption77 = {\n        \"indexed\": false,\n        \"indexRange\": \"\",  \n        \"options\": [\n            {\n                \"display\": \"0\",\n                \"description\": \"disabled (default) \",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"1\",\n                \"description\": \"enabled \",\n                \"type\": \"select\"\n            }\n        ],\n        \"description\": \"Do not power off if a slider is moved to far left\"\n    }\n\n\n    TasmotaConfig_07010200.commands.WiFi.CORS = {\n        \"indexed\": false,\n        \"indexRange\": \"\",  \n        \"options\": [\n            {\n                \"display\": \"\",\n                \"description\": \"disabled (default) \",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"*\",\n                \"description\": \"enable CORS for all hosts\",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"value\",\n                \"description\": \"Set CORS to specific host like http://tasui.shantur.com\",\n                \"type\": \"input\"\n            }\n        ],\n        \"description\": \"Enable/Disable Cross Origin Resource Sharing for a domain\"\n    }\n\n\n\n    return TasmotaConfig_07010200\n}\n\nexport let TasmotaConfig_07010200 = updatedConfig()","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport TasmotaConfig_06070000 from './TasmotaConfig-6.7.0.0'\nimport { TasmotaConfig_07010200 } from './TasmotaConfig-7.1.2.0'\n\nconst TasmotaVersionedConfig = {\n    TasmotaConfig_06070000: TasmotaConfig_06070000,\n    TasmotaConfig_07010200: TasmotaConfig_07010200,\n}\n\nfunction getConfigurationForVersion(version) {\n    if (version <= 0x06070000) {\n        return TasmotaVersionedConfig.TasmotaConfig_06070000\n    } else {\n\n        let versions = Object.keys(TasmotaVersionedConfig)\n        let closestVersion = 0xFFFFFFFF\n        let maximumVersion = -1\n\n        for (let i = 0; i < versions.length; i++) {\n            let availableVersion = parseInt(versions[i].replace('TasmotaConfig_', ''), 16)\n\n            if (availableVersion > maximumVersion) {\n                maximumVersion = availableVersion\n            }\n\n            if (availableVersion === version) {\n                closestVersion = availableVersion;\n                break\n            } else if (availableVersion > version) {\n                if (closestVersion > availableVersion) {\n                    closestVersion = availableVersion;\n                }\n            }\n        }\n\n        if (closestVersion === 0xFFFFFFFF) {\n            closestVersion = maximumVersion\n        }\n\n\n        return TasmotaVersionedConfig['TasmotaConfig_' + ('0000000' + closestVersion.toString(16).toUpperCase()).substr(-8)]\n    }\n}\n\nexport default getConfigurationForVersion","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport TasmotaDeviceConnector from '../DeviceTypes/TasmotaDeviceConnector';\nimport getConfigurationForVersion from '../Configuration/TasmotaVersionedConfig'\n\nclass DeviceManager {\n\n    deviceConnectors = {};\n\n\n    constructor() {\n        this.devices = \"devices\" in localStorage ? JSON.parse(localStorage.getItem('devices')) : {};\n        this.discoveredDevices = {};\n        Object.keys(this.devices).forEach((key) => {\n            if (!this.devices[key].status0Response) {\n                let oldInfo = Object.assign({}, this.devices[key])\n                this.devices[key] = { status0Response: oldInfo }\n            }\n        })\n\n        this.saveDevices()\n    }\n\n    getTasmotaConfig(macAddress) {\n        let deviceInfo = this.getDevice(macAddress)\n\n        let versionStr = deviceInfo.status0Response.StatusFWR.Version\n        versionStr = versionStr.substring(0, versionStr.indexOf('('))\n\n        let versionNumbers = versionStr.split('.')\n\n        let version = (parseInt(versionNumbers[0]) << 24) + (parseInt(versionNumbers[1]) << 16) + (parseInt(versionNumbers[2]) << 8) + (parseInt(versionNumbers[3]))\n\n        return getConfigurationForVersion(version)\n    }\n\n    addDevice(macAddress, deviceInfo) {\n        if (macAddress.length > 0) {\n            this.devices[macAddress] = deviceInfo\n            // if (this.discoveredDevices[macAddress]) {\n            //     delete this.discoveredDevices[macAddress]\n            // }\n            this.saveDevices()\n            return true;\n        }\n        return false;\n    }\n\n    saveDevices() {\n        localStorage.setItem('devices', JSON.stringify(this.devices));\n    }\n\n    addDiscoveredDevice(macAddress, status0Response) {\n        if (macAddress.length > 0) {\n            if (this.discoveredDevices[macAddress]) {\n                this.discoveredDevices[macAddress].status0Response = status0Response\n            } else {\n                this.discoveredDevices[macAddress] = {\n                    status0Response: status0Response,\n                }\n            }\n            if (this.devices[macAddress]) {\n                this.devices[macAddress].status0Response = status0Response\n                this.updateDeviceConnector(macAddress, status0Response.StatusNET.IPAddress)\n            }\n            return true\n        }\n        return false\n    }\n\n    clearDiscoveredDevices() {\n        for (let deviceMac in Object.keys(this.discoveredDevices)) {\n            if (this.deviceConnectors[deviceMac]) {\n                this.deviceConnectors[deviceMac].disconnect();\n                delete this.deviceConnectors[deviceMac]\n            }\n        }\n        this.discoveredDevices = {};\n    }\n\n    updateDeviceConnector(macAddress, ipAddress) {\n        if (this.deviceConnectors[macAddress]) {\n            this.deviceConnectors[macAddress].updateIpAddress(ipAddress)\n        }\n    }\n\n    updateDevice(macAddress, updatedInfo) {\n        if (this.devices[macAddress]) {\n            this.devices[macAddress] = { ...this.devices[macAddress], ...updatedInfo }\n            this.saveDevices()\n            this.updateDeviceConnector(macAddress, this.devices[macAddress].status0Response.StatusNET.IPAddress)\n        } else if (this.discoveredDevices[macAddress]) {\n            this.discoveredDevices[macAddress] = { ...this.discoveredDevices[macAddress], ...updatedInfo }\n            this.updateDeviceConnector(macAddress, this.discoveredDevices[macAddress].status0Response.StatusNET.IPAddress)\n        }\n    }\n\n    removeDevice(macAddress) {\n        if (this.devices[macAddress]) {\n            if (this.deviceConnectors[macAddress]) {\n                this.deviceConnectors[macAddress].disconnectAll()\n            }\n            delete this.devices[macAddress]\n            localStorage.setItem('devices', JSON.stringify(this.devices));\n        }\n    }\n\n    getDevice(macAddress) {\n        if (this.devices[macAddress]) {\n            return this.devices[macAddress];\n        } else if (this.discoveredDevices[macAddress]) {\n            return this.discoveredDevices[macAddress]\n        } else {\n            return null\n        }\n    }\n\n    getDevices() {\n        return this.devices;\n    }\n\n    getDiscoveredDevices() {\n        return this.discoveredDevices;\n    }\n\n    isDeviceKnown(macAddress) {\n        return this.devices[macAddress] != null;\n    }\n\n    getDeviceConnector(macAddress, ipAddress) {\n        if (this.deviceConnectors[macAddress]) {\n            return this.deviceConnectors[macAddress];\n        } else {\n            let deviceConnector = new TasmotaDeviceConnector(ipAddress, this.getDevice(macAddress).authInfo);\n            this.deviceConnectors[macAddress] = deviceConnector;\n            return deviceConnector;\n        }\n    }\n}\n\nexport default DeviceManager;","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Component } from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nclass DeviceDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            macAddress: \"\",\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'DeviceDetails');\n        window.gtag('event', 'screen_view', { 'screen_name': 'DeviceDetails'});\n        this.setState({\n            macAddress: this.props.match.params.mac\n        })\n\n    }\n\n    render() {\n        if (this.state.macAddress !== \"\") {\n            return (\n                <Box style={{ overflow: \"visible\", position: \"absolute\" }}>\n                    <TasmotaDevice macAddress={this.state.macAddress} renderType=\"Details\" deviceManager={this.props.deviceManager} />\n                </Box>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default DeviceDetails","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Component } from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\n\nclass DeviceDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            macAddress: \"\",\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'DeviceSettings');\n        window.gtag('event', 'screen_view', { 'screen_name': 'DeviceSettings'});\n        this.setState({\n            macAddress: this.props.match.params.mac\n        })\n\n    }\n\n    render() {\n        if (this.state.macAddress !== \"\") {\n            return (\n                <Box style={{ overflow: \"visible\", position: \"absolute\" }}>\n                    <TasmotaDevice macAddress={this.state.macAddress} renderType=\"Settings\" deviceManager={this.props.deviceManager} />\n                </Box>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default DeviceDetails;","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport { Checkbox, FormControlLabel, Typography } from '@material-ui/core';\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddIcon from '@material-ui/icons/Add';\nimport CallToActionIcon from '@material-ui/icons/CallToAction';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport InfoIcon from '@material-ui/icons/Info';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport IPAddress from 'ip-address';\nimport { withSnackbar } from 'notistack';\nimport React from 'react';\nimport superagent from \"superagent\";\nimport DeviceList from '../Components/DeviceList';\nimport DisplayTypeButtons from '../Components/DisplayModeButtons';\n\n\n\nclass FindDevices extends React.Component {\n\n    ipsToScan = [];\n    ipsRequested = [];\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ipFrom: this.props.appConfig.getAppConfig('ip_scan_from') || \"192.168.10.1\",\n            ipTo: this.props.appConfig.getAppConfig('ip_scan_to') || \"192.168.10.254\",\n            totalAddresses: \"\",\n            numIpsRequested: 0,\n            numIpsCompleted: 0,\n            searching: false,\n            displayMode: \"Table_Status\",\n            username: '',\n            password: '',\n            enableAuth: false,\n            enableCorsAutomatically: true,\n\n        }\n\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'screen_view', { 'screen_name': 'DiscoverDevices'});\n        window.gtag('event', 'DiscoverDevices');\n    }\n\n    componentWillMount() {\n        this.calculateTotalIPs(this.state.ipFrom, this.state.ipTo);\n    }\n\n    componentWillUnmount() {\n        // this.props.deviceManager.clearDiscoveredDevices();\n    }\n\n    handleIPFromChange = event => {\n        this.setState({\n            ipFrom: event.target.value,\n        });\n        let nets = event.target.value.split('.')\n        let to = this.state.ipTo\n        if (nets.length === 4) {\n            to = `${nets[0]}.${nets[1]}.${nets[2]}.254`\n            this.setState({\n                ipTo: to\n            })\n        }\n        this.calculateTotalIPs(event.target.value, to);\n    }\n\n    handleIPToChange = event => {\n        this.setState({\n            ipTo: event.target.value,\n        });\n        this.calculateTotalIPs(this.state.ipFrom, event.target.value);\n    }\n\n    calculateTotalIPs(ipFrom, ipTo) {\n\n        console.log('Calculate IPs From %s : To %s ', ipFrom, ipTo);\n\n        if (ipFrom.split('.').length === 4 && ipTo.split('.').length === 4) {\n\n            let from = new IPAddress.Address4(ipFrom);\n            let to = new IPAddress.Address4(ipTo);\n\n            // console.log('From %O : To %O ', from.bigInteger().toString() , to.bigInteger().toString());\n\n            this.setState({\n                totalAddresses: (to.bigInteger() - from.bigInteger() + 1),\n            })\n\n            console.log('Total Addresses : ' + (to.bigInteger() - from.bigInteger() + 1));\n        }\n    }\n\n    onCommandResponse(args) {\n        console.log(`${args.ip} : Present : ${args.success} Response : %O`, args.response);\n        if (args.success && args.response.body.StatusNET) {\n            this.props.deviceManager.addDiscoveredDevice(args.response.body.StatusNET.Mac, args.response.body);\n            if (this.state.enableAuth) {\n                this.props.deviceManager.updateDevice(args.response.body.StatusNET.Mac,\n                    {\n                        authInfo:\n                        {\n                            username: this.state.username,\n                            password: this.state.password,\n                        }\n                    })\n            }\n            this.setState({})\n            // }\n        } else {\n            if (args.success && args.response.body.WARNING) {\n                if (this.state.enableAuth) {\n                    this.props.enqueueSnackbar(`${args.ip} authentication failed`, { variant: 'error'})\n                } else {\n                    this.props.enqueueSnackbar(`${args.ip} needs authentication`, { variant: 'error'})\n                }\n            }\n        }\n        this.ipsRequested = this.ipsRequested.filter(item => item !== args.ip);\n        this.scanIps()\n    }\n\n    scanIps() {\n        if (this.ipsToScan.length) {\n\n            while (this.ipsRequested.length < 25 && this.ipsToScan.length) {\n                let ip = this.ipsToScan.shift()\n                this.ipsRequested.push(ip);\n                if (this.state.enableCorsAutomatically) {\n                    this.enableCorsAndSendRequest(ip)\n                } else {\n                    this.sendRequest(ip)\n                }\n            }\n\n            this.setState({\n                numIpsCompleted: (this.state.totalAddresses - this.ipsToScan.length) * 100 / this.state.totalAddresses,\n                numIpsRequested: (this.state.totalAddresses - this.ipsToScan.length + this.ipsRequested.length) * 100 / this.state.totalAddresses\n            })\n        } else {\n            if (this.ipsRequested.length === 0) {\n                this.setState({\n                    searching: false,\n                })\n            }\n        }\n    }\n\n    enableCorsAndSendRequest(ip) {\n        let cmnd = `Backlog SetOption73 1; CORS ${window.location.protocol}//${window.location.hostname}`\n\n        if (window.location.port && window.location.port !== \"\") {\n            cmnd += `:${window.location.port}`\n        }\n\n        let url = 'http://' + ip + '/cm?cmnd=' + encodeURIComponent(cmnd).replace(\";\", \"%3B\");\n\n        console.log(\"Enabling CORS for with \" + url)\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 6000, // but allow 6 seconds for the file to finish loading.\n            }).end(function (err, res) {\n                setTimeout(this.obj.sendRequest.bind(this.obj, this.ip), 1000);\n            }.bind({obj: this, ip: ip}));\n    }\n\n    sendRequest(ip) {\n        var callback = function (err, response) {\n            this.onCommandResponse({ key: this.cmnd, response: response, error: err, ip: this.ip, url: this.url, success: err ? false : true });\n        }\n\n        let cmnd = \"Status 0\"\n        // let ip = IPAddress.Address4.fromBigInteger(ipNum).correctForm();\n        let url = 'http://' + ip + '/cm?cmnd=' + encodeURIComponent(cmnd);\n\n        if (this.state.enableAuth) {\n            url += `&user=${encodeURIComponent(this.state.username)}&password=${encodeURIComponent(this.state.password)}`\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 60000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind({ onCommandResponse: this.onCommandResponse.bind(this), ip: ip, url: url, cmnd: cmnd, success: true }))\n\n    }\n\n    handleFindClicked() {\n\n        window.gtag('event', 'StartDiscovery');\n\n        let from = new IPAddress.Address4(this.state.ipFrom).bigInteger();\n        let to = new IPAddress.Address4(this.state.ipTo).bigInteger();\n\n        this.props.appConfig.putAppConfig('ip_scan_from', this.state.ipFrom)\n        this.props.appConfig.putAppConfig('ip_scan_to', this.state.ipTo)\n\n        for (let ipNum = from; ipNum <= to; ipNum++) {\n            this.ipsToScan.push(IPAddress.Address4.fromBigInteger(ipNum).correctForm());\n        }\n        this.setState({\n            searching: true,\n        })\n        this.scanIps();\n    }\n\n    handleStopClicked() {\n        window.gtag('event', 'StopDiscovery');\n        this.ipsToScan = [];\n        this.scanIps();\n    }\n\n    openDeviceDetails = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/details/' + macAddress);\n    }\n\n    addDevice = (macAddress, event) => {\n        window.gtag('event', 'AddDevice');\n        console.log('Add Device ' + macAddress)\n        event.stopPropagation();\n        this.props.deviceManager.addDevice(macAddress, this.props.deviceManager.getDiscoveredDevices()[macAddress]);\n        this.setState({})\n    }\n\n    deleteDevice = (macAddress, event) => {\n        window.gtag('event', 'DeleteDevice');\n        console.log('Delete Device ' + macAddress)\n        event.stopPropagation();\n        this.props.deviceManager.removeDevice(macAddress);\n        this.setState({})\n    }\n\n    openDeviceSettings = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/settings/' + macAddress);\n    }\n\n    openDeviceConsole = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/console/' + macAddress);\n    }\n\n    openWebUI  = (macAddress, event) => {\n        window.gtag('event', 'OpenWebUI');\n        event.stopPropagation();\n        let ip = this.props.deviceManager.getDevice(macAddress).status0Response.StatusNET.IPAddress\n        window.open(`http://${ip}`)\n    }\n\n    commonButtons = [{\n        toolTip: \"Details\",\n        label: \"details\",\n        icon: <InfoIcon />,\n        onButtonClick: (mac, event) => this.openDeviceDetails(mac, event),\n    }, {\n        toolTip: \"Settings\",\n        label: \"settings\",\n        icon: <SettingsApplicationsIcon />,\n        onButtonClick: (mac, event) => this.openDeviceSettings(mac, event),\n    }, {\n        toolTip: \"Console\",\n        label: \"console\",\n        icon: <CallToActionIcon />,\n        onButtonClick: (mac, event) => this.openDeviceConsole(mac, event),\n    }, {\n        toolTip: \"WebUI\",\n        label: \"webui\",\n        icon: <OpenInBrowserIcon />,\n        onButtonClick: (mac, event) => this.openWebUI(mac, event),\n    }]\n\n    knownDeviceButtons = [...this.commonButtons, {\n        toolTip: \"Delete\",\n        label: \"delete\",\n        icon: <DeleteIcon />,\n        onButtonClick: (mac, event) => this.deleteDevice(mac, event),\n    }]\n\n    newDeviceButtons = [...this.commonButtons, {\n        toolTip: \"Add\",\n        label: \"add\",\n        icon: <AddIcon />,\n        onButtonClick: (mac, event) => this.addDevice(mac, event),\n    }]\n\n    onAuthEnableChanged(event) {\n        event.stopPropagation()\n        this.setState({ enableAuth: event.target.checked })\n    }\n\n    onEnableCorsAutomaticallyChanged(event) {\n        event.stopPropagation()\n        this.setState({ enableCorsAutomatically: event.target.checked })\n    }\n\n    render() {\n\n        let discoveredDevices = this.props.deviceManager.getDiscoveredDevices()\n        let discoveredDevicesMacs = Object.keys(discoveredDevices)\n\n        let newDevices = discoveredDevicesMacs.filter((mac) => {\n            return !this.props.deviceManager.isDeviceKnown(mac)\n        }).reduce((obj, key) => {\n            obj[key] = discoveredDevices[key];\n            return obj;\n        }, {});\n\n\n        let knownDevices = discoveredDevicesMacs.filter((mac) => {\n            return this.props.deviceManager.isDeviceKnown(mac)\n        }).reduce((obj, key) => {\n            obj[key] = discoveredDevices[key];\n            return obj;\n        }, {});\n\n\n        return (\n            <Box display=\"flex\" flexGrow={1} flexDirection=\"column\" style={{ overflow: \"visible\", position: \"absolute\" }}>\n                <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\">\n                    <h1>Discover Active Devices</h1>\n                    <DisplayTypeButtons displayMode={this.state.displayMode} setState={(state) => this.setState(state)} />\n                </Box>\n                <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Start IP Address\"\n                        placeholder=\"IP\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.ipFrom}\n                        disabled={this.state.searching ? 1 : 0}\n                        onChange={this.handleIPFromChange}\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"End IP Address\"\n                        placeholder=\"IP\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.ipTo}\n                        disabled={this.state.searching ? 1 : 0}\n                        onChange={this.handleIPToChange}\n                    />\n                    {!this.state.searching ?\n                        <Button variant=\"contained\" margin=\"normal\" onClick={() => this.handleFindClicked()}>Start Discovery</Button>\n                        : <Button variant=\"contained\" margin=\"normal\" onClick={() => this.handleStopClicked()} >Stop Discovery</Button>\n                    }\n                </Box>\n                <Typography>\n                    IPs to scan : {this.state.totalAddresses}\n                </Typography>\n                <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                    <FormControlLabel\n                        value=\"end\"\n                        control={<Checkbox\n                            disabled={this.state.searching ? 1 : 0}\n                            color=\"primary\"\n                            checked={this.state.enableCorsAutomatically}\n                            onChange={(event) => this.onEnableCorsAutomaticallyChanged(event)}\n                        />}\n                        label=\"Enable CORS for TasUI\"\n                        labelPlacement=\"end\"\n                    />\n                </Box>\n                <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                    <FormControlLabel\n                        value=\"end\"\n                        control={<Checkbox\n                            disabled={this.state.searching ? 1 : 0}\n                            color=\"primary\"\n                            checked={this.state.enableAuth}\n                            onChange={(event) => this.onAuthEnableChanged(event)}\n                        />}\n                        label=\"Use Authentication\"\n                        labelPlacement=\"end\"\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Username\"\n                        placeholder=\"Username\"\n                        disabled={this.state.enableAuth && !this.state.searching ? 0 : 1}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.username}\n                        onChange={(event) => this.setState({ username: event.target.value })}\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Password\"\n                        placeholder=\"Password\"\n                        type=\"password\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        disabled={this.state.enableAuth && !this.state.searching ? 0 : 1}\n                        value={this.state.password}\n                        onChange={(event) => this.setState({ password: event.target.value })}\n                    />\n                </Box>\n                {this.state.searching ?\n                    <LinearProgress variant=\"buffer\" value={this.state.numIpsCompleted} valueBuffer={this.state.numIpsRequested} />\n                    : null}\n\n\n                {/* <h3>New Devices</h3> */}\n                <DeviceList\n                    key=\"newDevices\"\n                    displayMode={this.state.displayMode}\n                    deviceSections={{\n                        \"New Devices\": { devices: newDevices, itemButtons: this.newDeviceButtons },\n                        \"Saved Devices\": { devices: knownDevices, itemButtons: this.knownDeviceButtons }\n                    }}\n                    deviceManager={this.props.deviceManager}\n                />\n\n            </Box>\n        )\n\n    }\n\n}\n\n\n\nexport default withSnackbar(FindDevices)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Terminal from 'react-console-emulator'\nimport { Box, Container, FormControlLabel, Checkbox } from '@material-ui/core'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport superagent from 'superagent';\nimport ActionButton from '../Components/ActionButton';\nimport HelpIcon from '@material-ui/icons/Help';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst styles = theme => ({\n    terminal: {\n        flexGrow: 1,\n        flexBasis: \"0\",\n        flexShrink: 1,\n        height: \"80vh\",\n        overflow: \"hidden\",\n    },\n})\n\nclass Console extends React.Component {\n\n    commands = {}\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            deviceName: '',\n            webLogEnabled: false,\n            weblogLevel: 2,\n        }\n        this.terminal = React.createRef()\n        this.deviceManager = this.props.deviceManager\n        this.commandFired = null\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        console.log(`onCommandResponse ${cmnd} === ${this.commandFired}`)\n        if (cmnd === this.commandFired) {\n            this.commandFired = null\n            if (success) {\n                this.addLog(JSON.stringify(response))\n            } else {\n                this.addLog(`${cmnd} Failed`)\n            }\n        }\n\n        if (cmnd.toLowerCase().startsWith('weblog ') && success) {\n            if (response.WebLog) {\n                this.setState({ weblogLevel: response.WebLog })\n            } else {\n                this.setState({ weblogLevel: 1 })\n            }\n        }\n    }\n\n    sendConsoleCommand(cmnd) {\n        this.terminal.current.terminalInput.current.value = cmnd\n        this.terminal.current.processCommand()\n    }\n\n    addLog(line) {\n        let rootNode = this.terminal.current.terminalRoot.current;\n        let scrolledUp = rootNode.scrollTop < rootNode.scrollHeight - rootNode.clientHeight\n\n        this.terminal.current.pushToStdout(line)\n        if (!scrolledUp) {\n            this.terminal.current.scrollToBottom()\n        }\n    }\n\n    onWebLogLevelChanged(event) {\n        event.stopPropagation()\n        this.fireCommand('WebLog ' + event.target.value)\n    }\n\n    onWegLogEnableChanged(event) {\n        this.setState({ webLogEnabled: event.target.checked })\n        if (event.target.checked) {\n            this.startWebLog()\n        } else {\n            this.stopWebLog()\n        }\n    }\n\n    requestLog() {\n        var callback = function (err, response) {\n            // console.log (\"Error : %O Response : %O\", err, response);\n            if (response) {\n                this.nextCommanNumber = response.text.substring(0, response.text.indexOf('}'));\n                let index = response.text.indexOf(':');\n                if (index > 0) {\n                    let data = response.text.substring(index + 1)\n                    data = data.substring(0, data.lastIndexOf('}1'))\n                    let lines = data.split('\\n')\n                    for (let line of lines) {\n                        this.addLog(line)\n                    }\n                }\n            }\n        }\n        let url = 'http://' + this.deviceIPAddress + '/cs?c2=' + this.nextCommanNumber;\n\n        if (this.deviceInfo.authInfo) {\n            url += `&user=${encodeURI(this.deviceInfo.authInfo.username)}&password=${encodeURI(this.deviceInfo.authInfo.password)}`\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 1000,  // Wait 5 seconds for the server to start sending,\n                deadline: 3000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind(this))\n    }\n\n    fireCommand(command, args) {\n        this.commandFired = `${command} ${args}`\n        console.log(`FireCommand ${this.commandFired}`)\n        this.deviceConnector.performCommandOnDeviceDirect(this.commandFired)\n    }\n\n    generateCommands() {\n        for (let [commandCatagory, commands] of Object.entries(this.deviceConfig.commands)) {\n            for (let [commandName, command] of Object.entries(commands)) {\n                this.commands[commandName.toLowerCase()] = {\n                    description: ' ', //command.description,\n                    usage: `${commandName} ${command.options.length > 0 ? ` <value>` : ''}`,\n                    fn: (args) => this.fireCommand(commandName, args ? args : '')\n                }\n            }\n        }\n    }\n\n    componentWillMount() {\n        this.macAddress = this.props.match.params.mac\n        this.deviceInfo = this.deviceManager.getDevice(this.macAddress)\n        this.deviceIPAddress = this.deviceInfo.status0Response.StatusNET.IPAddress\n        this.deviceConfig = this.props.deviceManager.getTasmotaConfig(this.macAddress)\n        this.generateCommands()\n        if (!this.deviceConnector) {\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(this.macAddress, this.deviceInfo.status0Response.StatusNET.IPAddress);\n        }\n        this.deviceConnector.connect(this);\n        this.setState({ deviceName: this.deviceInfo.status0Response.Status.FriendlyName[0] })\n        this.nextCommanNumber = 0\n        if (this.state.webLogEnabled) {\n            this.startWebLog()\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'Console');\n        window.gtag('event', 'screen_view', { 'screen_name': 'Console'});\n        this.fireCommand('Weblog')\n    }\n\n    startWebLog() {\n        this.stopWebLog()\n        this.timer = setInterval(this.requestLog.bind(this), 3000);\n        this.requestLog()\n    }\n\n    stopWebLog() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopWebLog()\n        this.deviceConnector.disconnect(this);\n    }\n\n    toCamelCase(string) {\n        return string.replace(/^([A-Z])|\\s(\\w)/g, function (match, p1, p2, offset) {\n            if (p2) return p2.toUpperCase();\n            return p1.toLowerCase();\n        });\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <Box>\n                <Box flexGrow={1}>\n                    <FormControlLabel\n                        value=\"end\"\n                        control={<Checkbox\n                            color=\"primary\"\n                            checked={this.state.weblogEnabled}\n                            onChange={(event) => this.onWegLogEnableChanged(event)}\n                        />}\n                        label=\"Fetch Weblog\"\n                        labelPlacement=\"end\"\n                    />\n\n                    <ActionButton\n                        toolTip=\"Clear Console\"\n                        label=\"clear\"\n                        icon={<ClearIcon />}\n                        onButtonClick={() => this.terminal.current.clearStdout()}\n                    />\n\n                    <ActionButton\n                        toolTip=\"Show help\"\n                        label=\"help\"\n                        icon={<HelpIcon />}\n                        onButtonClick={() => this.sendConsoleCommand('help')}\n                    />\n\n                    <FormControl>\n                        <InputLabel id=\"weblog-select-label\">\n                            Weblog Level\n                        </InputLabel>\n                        <Select\n                            labelId=\"weblog-select-label\"\n                            id=\"weblog-select\"\n                            value={this.state.weblogLevel}\n                            onChange={(event) => this.onWebLogLevelChanged(event)}\n                        // labelWidth={labelWidth}\n                        >\n                            <MenuItem value={1}>Error Messages</MenuItem>\n                            <MenuItem value={2}>Error and Info</MenuItem>\n                            <MenuItem value={3}>Error, Info and Debug</MenuItem>\n                            <MenuItem value={4}>Error, Info and More Debug</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                </Box>\n                <Terminal\n                    className={classes.terminal}\n                    ref={this.terminal}\n                    commands={this.commands}\n                    welcomeMessage={'Console to ' + this.state.deviceName + '. Type help to see all commands. All commands are lowercase only'}\n                    promptLabel={`${this.toCamelCase(this.state.deviceName)}>`}\n                />\n            </Box>\n        )\n\n    }\n}\n\nexport default withStyles(styles)(Console)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\nclass AppConfig {\n\n\n    constructor() {\n        this.appConfig = \"appConfig\" in localStorage ? JSON.parse(localStorage.getItem('appConfig')) : {};\n        this.appSessionConfig = \"appSessionConfig\" in sessionStorage ? JSON.parse(localStorage.getItem('appConfigSession')) : {};\n    }\n\n    saveSessionConfig() {\n        sessionStorage.setItem('appSessionConfig', JSON.stringify(this.appSessionConfig));\n    }\n\n    saveAppConfig() {\n        localStorage.setItem('appConfig', JSON.stringify(this.appConfig));\n    }\n\n    putSessionConfig(key, value) {\n        this.appSessionConfig[key] = value\n        this.saveSessionConfig()\n    }\n\n    putAppConfig(key, value) {\n        this.appConfig[key] = value\n        this.saveAppConfig()\n    }\n\n    getSessionConfig(key) {\n        return this.appSessionConfig[key]\n    }\n\n    getAppConfig(key) {\n        return this.appConfig[key]\n    }\n}\n\nexport default AppConfig","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeveloperBoardIcon from '@material-ui/icons/DeveloperBoard';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { Route, Link, Switch, HashRouter as Router, Redirect } from 'react-router-dom';\n\nimport Devices from './Screens/Devices';\nimport DeviceManager from './DeviceManagement/DeviceManager';\nimport DeviceDetails from './Screens/DeviceDetails';\nimport DeviceSettings from './Screens/DeviceSettings';\nimport FindDevices from './Screens/FindDevices';\nimport Console from './Screens/Console'\nimport AppConfig from './Configuration/AppConfig'\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexBasis: \"100%\",\n    flexGrow: 0,\n    flexShrink: 1,\n    height: \"100vh\",\n    overflow: \"hidden\",\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  title: {\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(0.5),\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n  toolbar: {\n    ...theme.mixins.toolbar,\n    paddingLeft: theme.spacing(3),\n    display: 'flex',\n    // flexGrow: 1,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n  },\n  content: {\n    flexBasis: \"100%\",\n    flexGrow: 1,\n    flexShrink: 1,\n    height: \"100vh\",\n    justifyContent: \"center\",\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n    overflow: \"hidden\",\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n});\n\nconst deviceGroups = [\n  {\n  //   name: 'All',\n  //   link: '/devices/all',\n  //   icon: <BorderAllIcon/>,\n  // }, {\n  //   name: 'Favourites',\n  //   link: '/devices/favs',\n  //   icon: <FavoriteIcon/>,\n  }  \n]\n\nconst mainMenuItems = [\n  {\n    name: 'Devices',\n    link: '/devices',\n    icon: <DeveloperBoardIcon/>,\n    // children: deviceGroups,\n  }, {\n    name: 'Discover Devices',\n    link: '/findDevices',\n    icon: <SearchIcon/>,\n  // }, {\n  //   name: 'About',\n  //   link: '/about',\n  //   icon: <InfoIcon/>,\n  }\n]\n\nconst deviceManager = new DeviceManager();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.appConfig = new AppConfig()\n  }\n\n  renderChildItems(item) {\n    const { classes } = this.props;\n\n    if (item.children && item.children.length > 0) {\n      return item.children.map((child, index) => {\n        return(\n          <Link to={child.link}>\n            <ListItem button key={child.name} className={classes.nested}>\n              <ListItemIcon>{child.icon}</ListItemIcon>\n              <ListItemText primary={child.name} />\n            </ListItem>  \n          </Link>\n        )\n      })\n    } \n  }\n\n\n  render() {\n    const { classes } = this.props;\n\n    const listItems = mainMenuItems.map((item, index) => {\n      return (\n        <div>\n        <Link to={item.link} key={item.link} >\n          <ListItem button key={item.name}>\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.name} />\n          </ListItem>\n        </Link>\n\n        {this.renderChildItems(item)}\n        <Divider />\n        </div>\n      )\n    });\n\n\n    return (\n      <div className={classes.root}>\n        <Router>\n        <CssBaseline />\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n              TasUI\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          anchor=\"left\"\n        >\n          <div className={classes.toolbar} >\n            <Typography variant=\"h6\" noWrap className={classes.title}>\n                TasUI\n            </Typography>\n            <Link variant=\"subtitle2\" noWrap onClick={() => window.open(`https://github.com/IOTReboot/TasUI/tree/${process.env.REACT_APP_GIT_SHA}`)}>\n              {process.env.REACT_APP_VERSION} {process.env.REACT_APP_GIT_BRANCH} ({process.env.REACT_APP_GIT_SHA})\n            </Link>\n          </div>\n          <Divider />\n          <List>\n            {listItems}\n          </List>\n        </Drawer>\n          <main className={classes.content}>\n            <div className={classes.toolbar} />\n              <div>\n            <Switch className={classes.content}>\n              <Route exact path=\"/findDevices\" render={(props) => <FindDevices {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route exact path=\"/devices\" render={(props) => <Devices {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/details/:mac\" render={(props) => <DeviceDetails {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/settings/:mac\" render={(props) => <DeviceSettings {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/console/:mac\" render={(props) => <Console {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Redirect to=\"/devices\" />\n            </Switch>\n            </div>\n          </main>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { SnackbarProvider } from 'notistack';\n\n\nReactDOM.render(\n\n  <SnackbarProvider maxSnack={5}>\n    <App />\n  </SnackbarProvider>,\n  document.getElementById('root')\n\n);\n"],"sourceRoot":""}